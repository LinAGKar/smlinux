#!/bin/bash
# Super Mario 64 Install * Build * Update Script for Linux and macOS
# This scrupt will do everything required to build & install Super Mario 64 under Ubuntu or macOS.
# Other distros will need to edit config file when prompted to change Linux= command.
# Dependencies for many distros are listed on the github FAQ.  
# Please let me know if incorrect or if you have another distro to add.
# Sript updates from github.com/enigma9o7/smlinux unless AutoUpdate=0 in configfile.
TIMESTAMP=2020-1003-1911

domake(){
#Here We go & music to build to
if ( [ -f /usr/bin/mplayer ] || [ -f /bin/mplayer ] )  && [ -f "$SMLINUX"/File_Select_64_slowed_down.mp3 ]; then
	if [ -f "$BASEPATH"/"$PRESET"/sound/samples/sfx_mario/0C.aiff ]; then
		sh -c 'mplayer -nolirc -really-quiet '"$BASEPATH"/"$PRESET"'/sound/samples/sfx_mario/0C.aiff;mplayer -nolirc -really-quiet -volume 40 -loop 0 '"$SMLINUX"'/File_Select_64_slowed_down.mp3&'
	elif [ -f "$BASEPATH"/sm64ex/sound/samples/sfx_mario/0C.aiff ]; then
		sh -c 'mplayer -nolirc -really-quiet '"$BASEPATH"'/sm64ex/sound/samples/sfx_mario/0C.aiff;mplayer -nolirc -really-quiet -volume 40 -loop 0 '"$SMLINUX"'/File_Select_64_slowed_down.mp3&'
	else
		sh -c 'mplayer -nolirc -really-quiet -volume 40 -loop 0 '"$SMLINUX"'/File_Select_64_slowed_down.mp3&'
	fi
fi 
if [ "$TARGET_WEB" = 1 ] && [ "$InstallHD" = 1 ]; then
	sed -i.bak 's/TOTAL_MEMORY=20MB/TOTAL_MEMORY=40MB/g' "$BASEPATH"/"$PRESET"/Makefile
elif [ "$TARGET_WEB" = 1 ]; then
	sed -i.bak 's/TOTAL_MEMORY=20MB/TOTAL_MEMORY=30MB/g' "$BASEPATH"/"$PRESET"/Makefile
fi
if [ "$OSX_BUILD" = 1 ] && [ "$EXTERNAL_DATA" = 1 ]; then
	sed -i.bak 's/@echo -n > $(BASEPACK_LST)/#/g' "$BASEPATH"/"$PRESET"/Makefile
fi
if [ ! "$ANDROID" = 0 ]; then
	exec 2> >(grep -v GtkDialog >&2) # Supress GTK Dialog Warnings
	checkphone
	if [ "$GOTPHONE" = 1 ]; then
		zenity --info --text='\nPhone Detected.  Be sure to grant it debugging permission.\n\nExisting copies must also be removed from device.' --title="Preparing for Android Installation...." --width=440 &disown
	else
		echo "If you want the app installed to your Android device,"
		echo "plug it in now via USB and grant it debugging permission."
		zenity --info --text='\nIf you want the app installed to your Android device, attach it via USB.\n\nGrant it debugging permission before this window disappears.\n\nExisting copies must also be removed from device.' --title="Preparing for Android Installation...." --width=480 &disown
		echo
	fi
fi
if [ "$PRESET" = "sm64nx" ]; then
	sed -i.bak 's/-no-pie -lpthread -lzstd/-no-pie -lpthread -lzstd -lstdc++fs/g' "$BASEPATH"/"$PRESET"/Makefile
fi
if [ -f "$SMLINUX"/buildlog.txt ]; then
	mv -f "$SMLINUX"/buildlog.txt "$SMLINUX"/buildlog.old
fi
cd "$BASEPATH"/"$PRESET"
echo VERSION=$VERSION RENDER_API=$RENDER_API TARGET_WEB=$TARGET_WEB TARGET_RPI=$TARGET_RPI TEXTSAVES=$TEXTSAVES DEBUG=$DEBUG -j"$MAXJOBS"
echo BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA DISCORDRPC=$DISCORDRPC 
echo LEGACY_RES=$LEGACY_RES IMMEDIATELOAD=$IMMEDIATELOAD ENABLE_OPENGL_LEGACY=$ENABLE_OPENGL_LEGACY DOS_GL=$DOS_GL OSX_BUILD=$OSX_BUILD
if [ "$OSX_BUILD" = 1 ]; then
	time gmake CC=/usr/local/bin/gcc-9 CXX=/usr/local/bin/g++-9 OSX_BUILD=1 BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA DISCORDRPC=$DISCORDRPC VERSION=$VERSION RENDER_API=$RENDER_API TARGET_WEB=$TARGET_WEB TEXTSAVES=$TEXTSAVES -j"$MAXJOBS" LEGACY_RES=$LEGACY_RES DEBUG=$DEBUG IMMEDIATELOAD=$IMMEDIATELOAD TARGET_RPI=$TARGET_RPI ENABLE_OPENGL_LEGACY=$ENABLE_OPENGL_LEGACY DOS_GL=$DOS_GL > "$SMLINUX"/buildlog.txt
else
	time make BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA DISCORDRPC=$DISCORDRPC VERSION=$VERSION RENDER_API=$RENDER_API TARGET_WEB=$TARGET_WEB TEXTSAVES=$TEXTSAVES -j"$MAXJOBS" LEGACY_RES=$LEGACY_RES DEBUG=$DEBUG IMMEDIATELOAD=$IMMEDIATELOAD TARGET_RPI=$TARGET_RPI ENABLE_OPENGL_LEGACY=$ENABLE_OPENGL_LEGACY DOS_GL=$DOS_GL > "$SMLINUX"/buildlog.txt
fi
if [ ! "$ANDROID" = 0 ]; then
	if [ "ARMONLY" = 1 ]; then
		sed -i.bak "s/v8a', 'x86', 'x86_64'/v8a'/g" "$BASEPATH"/"$PRESET"/../../build.gradle
	fi
	if [ "$BRANCH" = "sm64ex" ] || [ "$BRANCH" = "sm64ex_nightly" ]; then
		make BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA DISCORDRPC=$DISCORDRPC VERSION=$VERSION RENDER_API=$RENDER_API TARGET_WEB=$TARGET_WEB TEXTSAVES=$TEXTSAVES -j"$MAXJOBS" LEGACY_RES=$LEGACY_RES DEBUG=$DEBUG  > "$SMLINUX"/buildlog.txt
		sed -i.bak '/include $(BUILD_SHARED_LIBRARY)/i TEXTURE_FIX ?= 0\nNODRAWINGDISTANCE ?= 0\nBETTERCAMERA ?= 0\nifeq ($(TEXTURE_FIX),1)\n  LOCAL_CFLAGS += -DTEXTURE_FIX\nendif\nifeq ($(NODRAWINGDISTANCE),1)\n  LOCAL_CFLAGS += -DNODRAWINGDISTANCE\nendif\nifeq ($(BETTERCAMERA),1)\n  LOCAL_CFLAGS += -DBETTERCAMERA\nendif\n' "$BASEPATH"/"$PRESET"/Android.mk
	fi
	if [ ! -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2* ]; then
		return
	else
		echo
		echo Native Build Succesful.
	fi
	cd "$BASEPATH"/"$ANDROID"
	checkphone
	echo Android Package Kit build starting...
	killall -q zenity
	if [ "$GOTPHONE" = 1 ]; then
		echo Do not disconnect phone until complete.
		echo
		TOUCH_CONTROLS=$TOUCH_CONTROLS BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA VERSION=$VERSION TEXTSAVES=$TEXTSAVES ./gradlew installDebug -q
	else
		echo WARNING: Phone not detected, building without installing.
		echo
		TOUCH_CONTROLS=$TOUCH_CONTROLS BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA VERSION=$VERSION TEXTSAVES=$TEXTSAVES ./gradlew assembleDebug -q
	fi
	if [ "ARMONLY" = 1 ]; then
		rm app/build.gradle
		git checkout app/build.gradle
	fi
	cd "$BASEPATH"/"$PRESET"
	rm Android.mk
	git checkout Android.mk
	if [ "$EXTERNAL_DATA" = 1 ] && [ "$InstallHD" = 1 ]; then
		echo Preparing external data for transfer...
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
		if [ -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/res/hdbase.zip ]; then
			cp "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/res/hdbase.zip "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
		else
			unzip hq_sounds_v5.1
		fi
		unzip -n base
		zip -r -0 -u hdbase gfx sound
		ln -s "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/hdbase.zip "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/hdbase.zip
		rm -rf sound gfx
	elif [ "$EXTERNAL_DATA" = 1 ]; then
		ln -s "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/base.zip "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/base.zip
	fi
	checkphone
	if [ "$GOTPHONE" = 1 ] && [ "$EXTERNAL_DATA" = 1 ]; then
		echo
		echo Pushing external assets to phone...
		if [[ ! `adb shell ls /sdcard/Android/data/com.vdavid003.sm64port 2> /dev/null` ]]; then
			adb shell mkdir /sdcard/Android/data/com.vdavid003.sm64port
			adb shell mkdir /sdcard/Android/data/com.vdavid003.sm64port/files
		fi
		if [ -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/hdbase.zip ]; then
			adb push "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/hdbase.zip /sdcard/Android/data/com.vdavid003.sm64port/files/
		elif [ "$EXTERNAL_DATA" = 1] && [ -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/base.zip ]; then
			adb push "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/base.zip /sdcard/Android/data/com.vdavid003.sm64port/files/
		fi
	fi
elif [ "$TARGET" = "dos" ]; then
	ln -s "$BASEPATH"/djgpp/csdpmi/CWSDPMI.EXE "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/
elif [ "$PRESET" = "sm64nx" ] || ( [ "$TARGET_WEB" = 1 ] && [ "$InstallHD" = 1 ] ); then
	cd "$BASEPATH"/"$PRESET"
	rm Makefile
	git checkout Makefile
elif [ "$LEGACY_RES" = 0 ]; then
	cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
	echo Creating Basepack...
	zip -q -r -0 base gfx sound
	if [ -f base.zip ]; then
		rm -rf gfx sound
	fi
elif [ -f  "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/awesome-legacy.zip ]; then
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
		if [ -f base.zip ]; then
			rm base.zip
		fi
		mv awesome-legacy.zip base.zip
fi
if [ -f /usr/bin/mplayer ] && [ -f "$SMLINUX"/File_Select_64_slowed_down.mp3 ]; then
	killall -q -y1h mplayer
fi
}

theend(){
if [ "$TARGET" = "web" ]; then
	echo
	echo Python webserver will remain running until you kill python3.
	echo Unless you forward a port you cannot connect from outside your local network.
	echo WARNING: emsdk environment is loaded.  Do not try to
	echo use this shell to build.  Exit and open new shell. 
elif [ "$TARGET" = "dos" ]; then
	echo
	echo WARNING: djgpp environment is loaded.  Do not try to 
	echo use this shell to build.  Exit and open new shell. 
fi
echo
echo smlinux is complete. 
echo smlinux internal timestamp "$TIMESTAMP".
if [ -d "$BASEPATH"/"$PRESET"/.git ]; then
	echo "$GIT"-"$BRANCH" last commit:
	cd "$BASEPATH"/"$PRESET"
	git log -1 --format=%cd
fi
echo Please exit or close this terminal window!
echo
exit
}


endnow(){
echo "Script Ending Incomplete.  Contact #help-desk for support."
	if [ "$OSX_BUILD" = 0 ] && [ "$TARGET_RPI" = 0 ]; then
		xdg-open https://discord.gg/Ub6YHRm &disown
	fi
echo Your smlinux internal timestamp is "$TIMESTAMP".
echo If that is not recent, perhaps updates are not working.
echo check https://github.com/enigma9o7/smlinux for the latest version.
echo
exit
}


androidsdk(){
if [ -f /usr/bin/apt ] && [ ! -d /usr/lib/android-sdk ]; then
	sudo apt install android-sdk -y
fi
if [ ! -f "$BASEPATH"/android-sdk/tools/bin/sdkmanager ]; then
	cd "$BASEPATH"
	wget -q https://dl.google.com/android/repository/commandlinetools-linux-6609375_latest.zip
	unzip -o commandlinetools-linux-6609375_latest -d android-sdk
	rm commandlinetools-linux-6609375_latest.zip
fi
PATH="$BASEPATH"/android-sdk/tools/bin:$PATH
export PATH="$BASEPATH"/android-sdk/tools/bin:$PATH
export ANDROID_HOME="$BASEPATH"/android-sdk
if [ ! -d "$BASEPATH"/android-sdk/licenses ]; then
	yes | sdkmanager --sdk_root=${ANDROID_HOME} --licenses
fi
if [ ! -d "$BASEPATH"/android-sdk/ndk-bundle ]; then
	sdkmanager --install --sdk_root=${ANDROID_HOME} ndk-bundle
fi
}

checkphone(){
adb get-state 1>/dev/null 2>&1 && GOTPHONE=1
}

gcccheck(){
if [ -f /usr/bin/gcc ] || [ -f /bin/gcc ]; then
	if [ `gcc -dumpfullversion -dumpversion` \> 7.99 ]; then
		echo gcc 8 or higher confirmed
		return
	fi
fi 
if [ -f /usr/bin/apt ] || [ -f /bin/apt ]; then		
	echo Attempting to install gcc 9.
	echo | sudo add-apt-repository ppa:ubuntu-toolchain-r/test
	sudo apt install -y g++-9
	sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 80 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9
	if [ `gcc -dumpversion` \> 8.99 ]; then
		echo gcc 9 succesfully installed
		return
	else
		echo Attempting to install gcc 8.
		sudo apt install -y g++-8
		sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 80 --slave /usr/bin/g++ g++ /usr/bin/g++-8 --slave /usr/bin/gcov gcov /usr/bin/gcov-8
		if [ `gcc -dumpversion` \> 7.99 ]; then
			echo gcc 8 succesfully installed
			return
		fi
	fi			
fi
echo "ERROR: smlinux doesn't think your C compiler is not new enough for sm64nx."
echo "gcc -dumpfullversion must report 8 or higher."
echo "Please install it then rerun smlinux, or use another repo."
echo "Sometimes its wrong - if you have gcc 8/9/10 and wish to continue, do so."
echo
exec 2> >(grep -v GtkDialog >&2) # Supress GTK Dialog Warnings
if zenity --question --text="sm64nx requires gcc 8 or newer and was not detected.\nDo you wish to continue anyway incase smlinux is reading gcc -dumpversion wrong,\nor abort so you can install it then run smlinux again?" --title "GCC 8 or newer not detected" --ok-label="Abort" --cancel-label="Continue" --width 550; then
	exit
fi
}

domymenu(){
	true
	#cd "$BASEPATH"/"$PRESET"/enhancements
	#cp "$SMLINUX"/menu-arrows.patch .
	#	echo Applying Menu Arrows...
	#cd "$BASEPATH"/"$PRESET"
	#git apply enhancements/menu-arrows.patch
}

vettrom(){
local romfile="$SMLINUX"/baserom."$VERSION"
if [ "$VERSION" = "us" ]; then
	hashcheck(){ 
	HASH=`sha1sum "$romfile".z64 | grep 9bef1128717f958171a4afac3ed78ee2bb4e86ce`
	}
elif [ "$VERSION" = "jp" ]; then
	hashcheck(){ 
	HASH=`sha1sum "$romfile".z64 | grep 8a20a5c83d6ceb0f0506cfc9fa20d8f438cafe51`
	}
elif [ "$VERSION" = "eu" ]; then
	hashcheck(){
	HASH=`sha1sum "$romfile".z64 | grep 4ac5721683d0e0b6bbb561b58a71740845dceea9`
	}
elif ["$VERSION" = "sh" ]; then
	hashcheck(){
	HASH=`sha1sum "$romfile".z64 | grep 3f319ae697533a255a1003d09202379d78d5a2e0`
	}
fi
hashcheck
if [ "$HASH" = "" ]; then
	echo ROM failed initial hash check - attempting format conversion...
	cd "$SMLINUX"
	if [ ! -f "$SMLINUX"/n64swap.py ]; then
		echo Getting conversion tools...
		wget https://github.com/Brawl345/N64Swap/raw/master/n64swap.py
		pip3 install numpy
	fi
	# Try V64
	mv "$romfile".z64 "$romfile".v64
	python3 n64swap.py "$romfile".v64 "$romfile".z64
	if [ -f "$romfile".z64 ]; then
		hashcheck
		if [ ! "$HASH" = "" ]; then
			echo Conversion from V64 succesful.
		else
			if [ -f "$romfile".z64 ]; then
				rm "$romfile".z64
			fi
			# Try N64
			mv "$romfile".v64 "$romfile".n64
			python3 n64swap.py "$romfile".v64 "$romfile".z64
			if [ -f "$romfile".z64 ]; then
				hashcheck
				if [ ! "$HASH" = "" ]; then
					echo Conversion from N64 succesful.
				elif [ -f "$romfile".* ]; then
					rm "$romfile".*
					echo Conversion still did not produce correct sha1sum.
				else
					echo Conversion still did not produce correct sha1sum.
				fi
			fi
		fi
	fi
fi
}

makeconfig(){
if [ ! -d "$SMLINUX" ]; then
	mkdir "$SMLINUX"
fi
echo '# PRESET supports: sm64pc sm64ex render96ex r96proto cheaterex
# AND: sm64-port sm64nx sm64ex-coop
# AND: sm64dos sm64-portweb sm64exweb sm64-port-android-base androidex 
PRESET=sm64ex
InstallHD=1
InstallSGI=0
# set MAXJOBS=n to limit cpu threads used, i.e. MAXJOBS=1 or MAXJOBS=7
MAXJOBS=
# [ options for sm64ex and its forks ] 
BETTERCAMERA=1
NODRAWINGDISTANCE=1
TEXTURE_FIX=1
EXTERNAL_DATA=1
DISCORDRPC=1
# RENDER_API supports GL (2.1+) or GL_LEGACY (1.1+)
RENDER_API=GL
TEXTSAVES=0
# [ options for sm64ex-coop only ]
IMMEDIATELOAD=1
# [ options for render96ex only ]
LEGACY_RES=1
# [ options for Android only ]
TOUCH_CONTROLS=1
ARMONLY=1
# [ options for DOS only ]
ENABLE_OPENGL_LEGACY=1
# DOS_GL Supports dmesa (glide) or osmesa
DOS_GL=osmesa
ENABLE_OPENGL_LEGACY=1
# [ Advanced Settings ]
# VERSION supports us jp eu (must correspond to rom version)
VERSION=us
# Set CONFIG=0 If you do not want to be automatically prompted before building.
CONFIG=1
# BASEPATH must exist and is where folders for each repo will be placed
BASEPATH=$HOME
# Set UpdateHD=0 to prevent smlinux updating addons when rebuilding
UpdateHD=1
# set DEBUG=1 if you want to make a debug build for some odd reason
DEBUG=0
TARGET_WEB=0
TARGET_RPI=0
OSX_BUILD=0
# [ GIT and BRANCH are ignored if PRESET is known ]
GIT=sm64pc/sm64ex
BRANCH=nightly
# [ Linux must be set to command appropriate to your distribution. See FAQ. ]
# Linux command is only called during first install and is not used for macOS
Linux="sudo apt install -y build-essential bsdmainutils wget git python3 libaudiofile-dev libglew-dev libsdl2-dev binutils libusb-1.0-0-dev libzstd-dev python3-pip p7zip-full mplayer"
# Set AutoUpdate=0 to prevent smlinux updating itself
AutoUpdate=1' > "$SMLINUX"/smlinuxcfg.txt
}

loadconfig(){
OSX_BUILD=0
TARGET_RPI=0
TEXTSAVES=0
TOUCH_CONTROLS=1
LEGACY_RES=1
BASEPATH=$HOME
ARMONLY=1
DEBUG=0
IMMEDIATELOAD=1
DOS_GL=osmesa
ENABLE_OPENGL_LEGACY=1
ANDROID=0
InstallSGI=0
source "$SMLINUX"/smlinuxcfg.txt
if [ -z $PRESET ] && [ ! -z $REPO ]; then
	PRESET="$REPO"
elif [ -z $PRESET ]; then
	PRESET=sm64-"$BRANCH"
fi
if [ "$PRESET" = "sm64pc" ]; then
	GIT=sm64ex/sm64pc
	BRANCH=master
elif [ "$PRESET" = "sm64-port" ]; then
	GIT=sm64-port/sm64-port
	BRANCH=master
	EXTERNAL_DATA=0
elif [ "$PRESET" = "sm64ex" ]; then
	GIT=sm64pc/sm64ex
	BRANCH=nightly
elif [ "$PRESET" = "sm64exweb" ]; then
	GIT=sm64pc/sm64ex
	BRANCH=nightly
	TARGET_WEB=1
	TARGET_RPI=0
	EXTERNAL_DATA=0
	DISCORDRPC=0
elif [ "$PRESET" = "sm64-portweb" ]; then
	GIT=sm64-port/sm64-port
	BRANCH=master
	TARGET_WEB=1
	TARGET_RPI=0
	EXTERNAL_DATA=0
	DISCORDRPC=0
elif [ "$PRESET" = "sm64nx" ]; then
	GIT=teamsalta/sm64nx
	BRANCH=master
	EXTERNAL_DATA=0
elif [ "$PRESET" = "render96ex" ] || [ "$PRESET" = "Render96ex" ] || [ "$PRESET" = "render96" ] || [ "$PRESET" = "Render96" ]; then
	PRESET=render96ex
	GIT=render96/render96ex
	BRANCH=master
	EXTERNAL_DATA=1
	TEXTSAVES=1
	InstallSGI=1
elif [ "$PRESET" = "r96proto" ]; then
	GIT=render96/render96ex
	BRANCH=fastbuild_prototype
	EXTERNAL_DATA=1
	TEXTSAVES=1
	InstallSGI=1
	DISCORDRPC=0
	LEGACY_RES=0
elif [ "$PRESET" = "cheaterex" ] || [ "$PRESET" = "CHEATERex" ] || [ "$PRESET" = "CHEATEREX" ]; then
	PRESET=cheaterex
	GIT=s4Ys369/cheaterex
	BRANCH=nightly
elif  [ "$PRESET" = "sm64ex-coop" ] || [ "$PRESET" = "coop" ]; then
	PRESET=sm64ex-coop
	GIT=djoslin0/sm64ex-coop
	BRANCH=coop
	NODRAWINGDISTANCE=1
elif [ "$PRESET" = "androidex" ] ; then
	ANDROID="$PRESET"
	PRESET="androidex/app/jni/src"
	GIT=vdavid003/sm64-port-android-base
	BRANCH=sm64ex_nightly
	TARGET_WEB=0
	TARGET_RPI=0
elif  [ "$PRESET" = "sm64-port-android-base" ]; then
	ANDROID="$PRESET"
	PRESET="sm64-port-android-base/app/jni/src"
	GIT=vdavid003/sm64-port-android-base
	BRANCH=master
	EXTERNAL_DATA=0
	TARGET_WEB=0
	TARGET_RPI=0	
elif  [ "$PRESET" = "mkstdos" ]; then
	GIT=mkst/sm64-port
	BRANCH=dos
	EXTERNAL_DATA=0
	TARGET_WEB=0
	TARGET_RPI=0
	TARGET=dos		
	InstallHD=0
elif  [ "$PRESET" = "sm64dos" ]; then
	GIT=fgsfdsfgs/sm64-port
	BRANCH=dos
	EXTERNAL_DATA=0
	TARGET_WEB=0
	TARGET_RPI=0
	TARGET=dos		
fi
if [ `uname` = "Darwin" ]; then
	OSX_BUILD=1
fi
if [ ! `uname -m` = "x86_64" ] || [ ! "$VERSION" = "us" ]; then
	DISCORDRPC=0
fi
if [ "$TARGET_WEB" = 1 ]; then 
	TARGET=web
elif [ ! "$TARGET" = "dos" ]; then
	TARGET=pc
fi
if [ -z "$MAXJOBS" ] && [ "$OSX_BUILD" = 0 ]; then
	if [ "$PRESET" = "sm64nx" ]; then 
		MAXJOBS=$((`nproc` - 1))		
	else 
		MAXJOBS=`nproc`
	fi
fi
if [ "$2" = "--hd" ] || [ "$3" = "--hd" ] ||[ "$4" = "--hd" ] ||[ "$5" = "--hd" ]; then
	UpdateHD=1
	InstallHD=1
fi
if [ "$2" = "--sgi" ] || [ "$3" = "--sgi" ] ||[ "$4" = "--sgi" ] ||[ "$5" = "--sgi" ]; then
	EXTERNAL_DATA=1
	InstallSGI=1
elif [ "$2" = "--SGI" ] || [ "$3" = "--SGI" ] ||[ "$4" = "--SGI" ] ||[ "$5" = "--SGI" ]; then
	EXTERNAL_DATA=1
	InstallSGI=1
fi
if [ "$2" = "--config" ] || [ "$3" = "--config" ] ||[ "$4" = "--config" ] ||[ "$5" = "--config" ]; then
	CONFIG=1
elif [ "$2" = "config" ] || [ "$3" = "config" ] ||[ "$4" = "config" ] ||[ "$5" = "config" ]; then
	CONFIG=1
fi
if [ "$2" = "--depends" ] || [ "$3" = "--depends" ] ||[ "$4" = "--depends" ] ||[ "$5" = "--depends" ]; then
	DEPENDS=1
fi
}

doconfig(){
if ! command -v whiptail &> /dev/null; then
    return
elif (whiptail --title "Build Options" --yesno "$(cat "$SMLINUX"/smlinuxcfg.txt)" 28 77 --yes-button "Edit Options" --no-button "Proceed" --defaultno); then
	whiptail --title "smlinux paused until you exit editor" --msgbox "Your configuration file will open in a text editor.\n\nWhen you exit your editor, smlinux will continue.\n\nFor first build, default options which include community enhancements are reccommended.\n\nIf you mess up your settings,\nrun smlinux reset to restore to latest defaults." 16 60 2>&1
	editconfig	
fi
}

editconfig(){
echo Looking for a text editor...
EDITORS=kate:epad:gedit:notepadqq:bluefish:geany:lime:medit:leafpad:nano:pico:micro:jed:emacs:vim:vi
IFS=":"
for editor in $EDITORS; do
	$editor "$SMLINUX"/smlinuxcfg.txt
	if [ $? -eq 0 ]; then
		echo "$PATHDIR"/smlinux: line $(($LINENO - 2))":" "$editor": wow! command found!
		echo
		return
	fi
done
}

loademsdk(){
if [ ! -d "$BASEPATH"/emsdk ]; then
	cd "$BASEPATH"
	git clone https://github.com/emscripten-core/emsdk
	cd emsdk
	./emsdk install 1.39.5
	./emsdk activate 1.39.5
fi
source "$BASEPATH"/emsdk/emsdk_env.sh
}


dodos(){
cd "$BASEPATH"
if [ ! -d "$BASEPATH"/djgpp/bin ]; then
	wget https://github.com/andrewwutw/build-djgpp/releases/download/v3.0/djgpp-linux64-gcc930.tar.bz2
	tar xjf djgpp-linux64-gcc930.tar.bz2
	rm djgpp-linux64-gcc930.tar.bz2
fi
if [ ! -d "$BASEPATH"/djgpp/csdpmi ]; then
	mkdir djgpp/csdpmi
	wget https://sandmann.dotster.com/cwsdpmi/csdpmi7b.zip
	unzip -j -d djgpp/csdpmi csdpmi7b.zip bin/CWSDPMI.EXE
	rm csdpmi7b.zip
fi
export PATH="$BASEPATH"/djgpp/bin:$PATH
}

prepnx(){
mkdir "$BASEPATH"/"$PRESET"/build
mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs
ln -s "$SHARE"/"$PRESET"/sm64.sav "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.sav 
ln -s "$SHARE"/"$PRESET"/sm64.log "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.log 
ln -s "$SHARE"/"$PRESET"/conf.bin "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/conf.bin
ln -s "$SHARE"/"$PRESET"/gamepad1.bindings.json "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/gamepad1.bindings.json
ln -s "$SHARE"/"$PRESET"/keyboard1.bindings.json "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/keyboard1.bindings.json
ln -s "$SMLINUX"/baserom."$VERSION".z64 "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/baserom."$VERSION".z64
cd "$BASEPATH"/"$PRESET"/tools
make -j"$MAXJOBS"
cd "$BASEPATH"/"$PRESET"/import
python3 extract_assets.py
python3 ../scripts/pak.py --source . --output "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/'!!base.pak'
if [ ! -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/'!!base.pak' ]; then
	echo 
	echo ERROR: Unable to extract and pak ROM.
	endnow
fi
}

dohd(){ 
if [ "$PRESET" = "sm64nx" ]; then 
	echo Getting Add-on Paks
	if [ ! -d "$BASEPATH"/"$PRESET"/build ] ; then mkdir "$BASEPATH"/"$PRESET"/build
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" ] ; then mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs ] ; then mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"Cleaner Aesthetics" ]; then
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"Cleaner Aesthetics"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"Cleaner Aesthetics"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730430152957362191/cleaner.pak
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"HD Mario . Bowser" ]; then
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"HD Mario . Bowser"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"HD Mario . Bowser"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730425308989227158/arredondo.pak
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~SGI Models" ]; then
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~SGI Models"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~SGI Models"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730645970693652591/sgi1.2.pak
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~OWO Mod" ]; then
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~OWO Mod"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~OWO Mod"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730420038024036362/owo.pak
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~HD Luigi" ]; then
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~HD Luigi"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~HD Luigi"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730425786452017222/luigi.pak
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~NES Retro" ]; then
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~NES Retro"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~NES Retro"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730431589749620736/nes.pak
	fi
else
	if [ "$EXTERNAL_DATA" = 1 ] ; then
		if [ ! -d "$BASEPATH"/"$PRESET"/build ] ; then 
			mkdir "$BASEPATH"/"$PRESET"/build
		fi
		if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" ] ; then 
			mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
		fi
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git ] ; then
			echo Updating textures from github...
			cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			git pull
		elif [ -d "$BASEPATH"/"$PRESET".old/build/"$VERSION"_"$TARGET"/res/.git ] ; then
			echo Restoring old texture source...
			if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ]; then
				mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
			cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			mv "$BASEPATH"/"$PRESET".old/build/"$VERSION"_"$TARGET"/res/.git .
			cp "$BASEPATH"/"$PRESET".old/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip .
			echo Updating textures from github...
			git checkout gfx
			git pull --no-rebase
		elif [ "$PRESET" = "r96proto" ] && [ -d "$BASEPATH"/render96ex/build/"$VERSION"_"$TARGET"/res/.git ]; then
			echo Copying texutres from render96ex
			if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ]; then
				mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
			mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git
			cp -r -u "$BASEPATH"/render96ex/build/"$VERSION"_"$TARGET"/res/.git/* "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git
			cp -r -u "$BASEPATH"/render96ex/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			echo Updating textures from github...
			cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			git checkout gfx
			git pull --no-rebase
		elif [ "$PRESET" = "render96ex" ] && [ -d "$BASEPATH"/r96proto/build/"$VERSION"_"$TARGET"/res/.git ]; then
			echo Copying texutres from r96proto
			if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ]; then
				mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
			mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git
			cp -r -u "$BASEPATH"/r96proto/build/"$VERSION"_"$TARGET"/res/.git/* "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git
			cp -r -u "$BASEPATH"/r96proto/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			echo Updating render96 textures from github...
			cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			git checkout gfx
			git pull --no-rebase
		elif [ ! "PRESET" = "render96ex" ] && [ ! "PRESET" = "r96proto" ] && [ -d "$BASEPATH"/sm64ex/build/"$VERSION"_"$TARGET"/res/.git ]; then
			echo Copying texutres from sm64ex
			if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ]; then
				mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
			mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git
			cp -r -u "$BASEPATH"/sm64ex/build/"$VERSION"_"$TARGET"/res/.git/* "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git
			cp -r -u "$BASEPATH"/sm64ex/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			echo Updating textures from github...
			cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			git checkout gfx
			git pull --no-rebase
		elif [ ! "PRESET" = "render96ex" ] && [ ! "PRESET" = "r96proto" ] && [ -d "$BASEPATH"/sm64ex-coop/build/"$VERSION"_"$TARGET"/res/.git ]; then
			echo Copying texutres from sm64ex-coop
			if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ]; then
				mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
			mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git
			cp -r -u "$BASEPATH"/sm64ex-coop/build/"$VERSION"_"$TARGET"/res/.git/* "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git
			cp -r -u "$BASEPATH"/sm64ex-coop/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			echo Updating textures from github...
			cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			git checkout gfx
			git pull --no-rebase
		elif [  -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ] ; then
			mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res.old
		fi
		if [  ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ] ; then
			if [ "$PRESET" = "render96ex" ] || [ "$PRESET" = "r96proto" ]; then
				echo Downloading Render96 Textures... 
				git clone --single-branch https://github.com/pokeheadroom/RENDER96-HD-TEXTURE-PACK "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			else
				echo Downloading Cleaner Aesthetics Textures...
				git clone --single-branch https://github.com/CrashCrod/Cleaner-Aesthetics "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
		fi
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res.old ]; then
			mv -n "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res.old/* "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
		fi
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/gfx/textures/skyboxes ]; then
			rm -rf "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/gfx/textures/skyboxes
		fi
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/screenshots ]; then
			rm -rf "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/screenshots
		fi
		if [ ! -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip ]; then
			cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res	
			echo Getting High Quality Sounds...
			wget https://github.com/MapAnon/sm64-pc-hq-sounds/releases/download/5.1/hq_sounds_v5.1.zip
		fi
	elif [ "$PRESET" = "sm64ex" ] || [ "$PRESET" = "render96ex" ] ||[ "$PRESET" = "cheaterex" ] ||[ "$PRESET" = "sm64ex-coop" ] || [ "$PRESET" = "androidex" ]; then
		echo WARNING: EXTERNAL_DATA=0 so skipping add-on textures and Sound
	elif [ "$PRESET" = "sm64-port" ]; then
		echo External Data not supported for sm64-port repository, skipping...
	fi
	if [ "$PRESET" = "r96proto" ]; then 		
		echo WARNING: Skipping Models for r96 proto
	elif  [ "$InstallSGI" = 1 ]; then
		dosgi
	elif  [ ! "$InstallSGI" = 1 ] && [ ! -f "$BASEPATH"/"$PRESET"/enhancements/Old_School_HD_SGI_Base_Models_V1.3_Refresh_11.7z ] && [ ! -f "$BASEPATH"/"$PRESET"/enhancements/RENDER96_V1* ] ; then
		if [ ! -f "$BASEPATH"/"$PRESET"/enhancements/hd_bowser.rar ] && [ ! "$TARGET" = "dos" ]; then
			cd "$BASEPATH"/"$PRESET"/enhancements
			if [ ! "$PRESET" = "sm64ex-coop" ]; then
				wget -q https://cdn.discordapp.com/attachments/716459185230970880/719758031990030427/Old_School_HD_Mario_Model.zip 
			fi
			wget -q https://cdn.discordapp.com/attachments/716459185230970880/718990046442684456/hd_bowser.rar	
			cd "$BASEPATH"/"$PRESET"
			echo Saving original actors folder as actors.bak 	
			cp -Rn actors actors.bak
			if [ ! "$PRESET" = "sm64ex-coop" ]; then
				echo Extracting HD Mario...
				unzip -o enhancements/Old_School_HD_Mario_Model 
			fi
			echo Extracing HD Bowser...
			unrar x -o+ enhancements/hd_bowser
		fi
		if [ ! -f "$BASEPATH"/"$PRESET"/enhancements/3d_coin_v2*.patch ] && [ ! "$TARGET" = "dos" ] && [ "$ANDROID" = 0 ] && [ ! "$PRESET" = "sm64ex-coop" ]; then
			cd "$BASEPATH"/"$PRESET"/enhancements
			if [ "$PRESET" = "sm64pc" ]; then
				wget -q https://cdn.discordapp.com/attachments/716459185230970880/718674249631662120/3d_coin_v2.patch
			else
				cd "$BASEPATH"/"$PRESET"/enhancements
				wget -q https://cdn.discordapp.com/attachments/721806706547490868/725041183700680807/3d_coin_v2_nightly.patch
			fi
			if [ -f "$BASEPATH"/"$PRESET"/enhancements/3d_coin_v2*.patch ]; then
				cd "$BASEPATH"/"$PRESET"
				echo Applying 3D Coin Patch...
				git apply enhancements/3d_coin_v2*.patch
			fi
		fi
		if [ `uname -m` = "x86_64" ] && [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps*.patch ] && [ "$TARGET_WEB" = 0 ] && [ ! "$PRESET" = "sm64ex-coop" ] && [ ! "$PRESET" = "cheaterex" ]; then
			cd "$BASEPATH"/"$PRESET"
			if [ ! -f "$BASEPATH"/"$PRESET"/enhancements/60fps ]; then
				echo Applying 60fps patch...
				git apply enhancements/60fps*.patch
				touch enhancements/60fps
				if [ -f "$SHARE"/"$PRESET"/sm64config.txt ] && [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps ]; then
					echo Enabling Vsync...
					sed -i.bak 's/vsync false/vsync true/g' "$SHARE"/"$PRESET"/sm64config.txt
				fi
			fi
		fi
	fi
fi
}

dosgi(){
if  [ "$TARGET_WEB" = 1 ] || [ "$EXTERNAL_DATA" = 0 ]; then
	if(whiptail --title "SGI Model Warning" --yesno "SGI Models are unlikely to work without external data or for web Target." 10 50 --yes-button "Continue Anyway" --no-button "Cancel" --defaultno); then
		echo WARNING: sgi 1.3 might not work on anything besides sm64ex-nightly
		echo Proceeding anyway, but it may not be succesful.
	else
		return
	fi
fi
if [ -f "$BASEPATH"/"$PRESET"/enhancements/RENDER96_V1* ] || [ -f "$BASEPATH"/"$PRESET"/enhancements/Old_School_HD_SGI_Base_Models_V1.3_Refresh_11.7z ] || [ -f "$BASEPATH"/"$PRESET"/enhancements/render96* ]; then 
	echo Render96 models already installed.
	return
fi
if [ ! -f /usr/bin/7z ]; then 
	if [ ! -f /bin/7z ]; then
		echo "SGI Models comes as a 7z file but you don't have 7z to extract it."
		if [ -f /usr/bin/apt ]; then
			echo Please provide your password to install...
			sudo apt install p7zip-full
		else
			echo This script checks for /usr/bin/7z.  The ubuntu package is called p7zip.
			echo Please install whatever package gets you 7z and run smlinux again.
			echo Also please let author know what package and distro so I can add it
			echo to depdencency list so others avoid this message.  
			exit
		fi
	fi
fi
if [ -f "$BASEPATH"/"$PRESET"/enhancements/3d_coin*.patch ]; then
	echo Removing 3D coins...
	cd "$BASEPATH"/"$PRESET"
	git apply -R enhancements/3d_coin*.patch
	rm enhancements/3d_coin*.patch
fi
if [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps ]; then
	cd "$BASEPATH"/"$PRESET"
	git apply -R enhancements/60fps*.patch
	rm enhancements/60fps
	if [ -f "$SHARE"/"$PRESET"/sm64config.txt ]; then
		sed -i.bak 's/vsync true/vsync false/g' "$SHARE"/"$PRESET"/sm64config.txt
	fi
fi
if [ "$PRESET" = "render96ex" ] || [ "$PRESET" = "r96proto" ]; then
	cd "$BASEPATH"/"$PRESET"/enhancements 
	wget -q https://cdn.discordapp.com/attachments/730551213376143431/745382037560492132/RENDER96_V1.4.2_Luigi_Fixed_Sound.zip
	SGIFILE=RENDER96_V1.4.2_Luigi_Fixed_Sound.zip
elif [ "$PRESET" = "sm64ex-coop" ]; then
	cd "$BASEPATH"/"$PRESET"/enhancements
	wget -q https://sm64pc.info/downloads/model_pack/render96_coop.zip
	SGIFILE=render96_coop.zip
else
	cd "$BASEPATH"/"$PRESET"/enhancements
	wget -q https://cdn.discordapp.com/attachments/727722992137666573/745038574918828112/RENDER96_V1.3.7z
	SGIFILE=RENDER96_V1.3.7z
fi
if  [ -f "$BASEPATH"/"$PRESET"/enhancements/CHEATER.patch ]; then
	echo Removing cheater...
	cd "$BASEPATH"/"$PRESET"
	git apply -R enhancements/CHEATER*.patch
	rm enhancements/CHEATER*
fi
if [ -d "$BASEPATH"/"$PRESET"/actors.bak ] && [ ! "$SGIFILE" = "render96_coop.zip" ]; then
	echo Restoring default actors...
	cd "$BASEPATH"/"$PRESET"/enhancements
	rm -rf "$BASEPATH"/"$PRESET"/actors
	mv "$BASEPATH"/"$PRESET"/actors.bak "$BASEPATH"/"$PRESET"/actors
	rm hd_bowser.rar Old_School_HD_Mario_Model.zip
elif [ -d "$BASEPATH"/"$PRESET"/actors.bak ] && [ "$SGIFILE" = "render96_coop.zip" ]; then
	echo Restoring default actors and keeping backup...
	cd "$BASEPATH"/"$PRESET"/enhancements
	rm -rf "$BASEPATH"/"$PRESET"/actors
	cp -r "$BASEPATH"/"$PRESET"/actors.bak "$BASEPATH"/"$PRESET"/actors
	rm hd_bowser.rar
elif [ "$SGIFILE" = "render96_coop.zip" ]; then
	echo Saving original actors folder as actors.bak 	
	cd "$BASEPATH"/"$PRESET"
	cp -Rn actors actors.bak
fi
cd "$BASEPATH"/"$PRESET"
echo Applying Render96 SGI Models...
7z x enhancements/"$SGIFILE" -aoa 
}
	
scriptUpdate(){
if [ ! -f ~/.smlinuxUpdate ]; then 
	if [ ! -f "$PATHDIR"/smlinux ] || [ ! -d "$SMLINUX"/.git ] ; then
		echo Installing smlinux... 		
		if [ -d "$SMLINUX" ]; then
			if [ -d "$SMLINUX".baq ]; then
				rm -rf "$SMLINUX".baq
			fi
			mv -f "$SMLINUX" "$SMLINUX".baq
		fi
		git clone --single-branch https://github.com/enigma9o7/smlinux.git "$SMLINUX"
		if [ -d "$SMLINUX".baq ]; then
			cp -Rn "$SMLINUX".baq/* "$SMLINUX"/
			rm -rf "$SMLINUX".baq
		fi
		if [ ! -d "$SMLINUX"/.git ] ; then
			echo ERROR: Cannot connect to github. Run without AutoUpdate enabled.  
			echo smlinux exiting incomplete.
			exit
		fi
		touch ~/.smlinuxUpdate
		mv -f "$SMLINUX"/smlinux "$PATHDIR"/
		if [ ! -f "$PATHDIR"/smlinux ]; then
			echo WARNING: Could not write to first path directory.  Creating $HOME/bin.
			touch "$HOME"/.smlinuxNopath
			mkdir $HOME/bin
			export PATH=$HOME/bin:$PATH
			if [ "$OSX_BUILD" = 1 ]; then	
				PATHDIR=$HOME/bin
			else
				mapfile -t -d: <<<"$PATH"
				PATHDIR="${MAPFILE[0]}"
			fi
			mv -f "$SMLINUX"/smlinux "$PATHDIR"
			if [ ! -f "$PATHDIR"/smlinux ]; then
				echo ERROR - Could not add to path.  Run without AutoUpdate enabled.
				echo smlinux exiting incomplete.
				exit
			fi
		else
			echo smlinux succefully added to path.
		fi
		chmod +x "$PATHDIR"/smlinux
		cd "$LAUNCH_DIR"
		exec smlinux "$COMMAND" "$OP1" "$OP2" "$OP3" "$OP4"
	else
		cd "$SMLINUX"
		git fetch
		if [ "$(git diff HEAD origin/HEAD -- smlinux)" != "" ]; then
			git merge
			if [ ! -f "$SMLINUX"/smlinux ]; then
				echo "ERROR: Script Update Unsuccesful."
				echo "Try #help-desk if script udpates continue to fail"
			else
				echo 'if [ `uname` = "Darwin" ]; then	
					PATHDIR=/usr/local/bin
				else
					mapfile -t -d: <<<"$PATH"
					PATHDIR="${MAPFILE[0]}"
				fi
				SHARE=${XDG_DATA_HOME:-$HOME/.local/share}
				SMLINUX="$SHARE"/sm64pc
				mv -f "$SMLINUX"/smlinux "$PATHDIR"/
				if [ ! -f "$PATHDIR"/smlinux ]; then
					echo WARNING: Could not write to first path directory.  Creating $HOME/bin.
					touch "$HOME"/.smlinuxNopath
					mkdir $HOME/bin
					export PATH=$HOME/bin:$PATH
					mapfile -t -d: <<<"$PATH"
					PATHDIR="${MAPFILE[0]}"
					mv -f "$SMLINUX"/smlinux "$PATHDIR"/
					if [ ! -f "$PATHDIR"/smlinux ]; then
						echo ERROR - Could not add to path.  Run without AutoUpdate enabled.
						exit
					fi
				fi
				chmod +x "$PATHDIR"/smlinux
				if [ -f "$HOME"/Downloads/smlinux ]; then mv -f "$HOME"/Downloads/smlinux "$HOME"/Downloads/smlinux.old.backup
				fi
				if [ -f "$HOME"/Downloads/smlinux.sh ]; then mv -f "$HOME"/Downloads/smlinux.sh "$HOME"/Downloads/smlinux.old.backup
				fi
				if [ -f "$HOME"/Downloads/smlinux.txt ]; then mv -f "$HOME"/Downloads/smlinux.txt "$HOME"/Downloads/smlinux.old.backup
				fi	
				exec smlinux "$@"' > ~/.smlinuxUpdate
				chmod +x ~/.smlinuxUpdate
				cd "$LAUNCH_DIR"
				exec ~/.smlinuxUpdate "$COMMAND" "$OP1" "$OP2" "$OP3" "$OP4"
			fi
		elif [ "$COMMAND" = "upgrade" ]; then    
			echo smlinux is already up to date.
			exit
		else    
			echo smlinux is already up to date.
		fi
	fi
fi
}

docheats(){
cd "$BASEPATH"/"$PRESET"/enhancements
if [ ! -f "$BASEPATH"/"$PRESET"/enhancements/CHEATERv9*.zip ]; then
	echo Getting cheats...
	if [ -f CHEATER*.zip ]; then
		rm CHEATER*.zip
	fi
	wget https://cdn.discordapp.com/attachments/716459185230970880/762071729069359114/CHEATERv9.zip
	if [ -f CHEATERv9.zip ] && [ "$PRESET" = "render96ex" ]; then
		unzip CHEATERv9 v9_r96ex.patch
	elif [ -f CHEATERv9.zip ]; then
		unzip CHEATERv9 v9_sm64ex.patch
	fi
	if [ -f CHEATERv9.zip ] && [ -f CHEATER.patch ]; then
		echo Updating cheats...
		cd "$BASEPATH"/"$PRESET"
		git apply -R enhancements/CHEATER.patch
		rm enhancements/CHEATER.patch
		git apply enhancements/v9_*.patch
	elif [ -f CHEATERv9.zip ]; then
		echo Applying cheats...
		cd "$BASEPATH"/"$PRESET"
		git apply enhancements/v9_*.patch
	fi
fi
}

makedesktop(){
if [ ! -d "$SHARE"/icons ]; then 
	mkdir "$SHARE"/icons
fi
if [ ! -d "$SHARE"/applications ]; then 
	mkdir "$SHARE"/applications
fi
if [ ! -f "$SHARE"/icons/"$PRESET".* ]; then
	echo Getting Icon...
	if [ "$PRESET" = "sm64ex" ]; then
		wget -q https://cdn.discordapp.com/attachments/711253314855108629/712146686834638890/sm64.png
		mv sm64.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "sm64nx" ]; then 
		wget -q https://cdn.discordapp.com/attachments/711253314855108629/719215654837682226/Super_Mario_64.png
		mv Super_Mario_64.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "render96ex" ]; then
		mv "$SMLINUX"/r96-icon.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "r96proto" ]; then
		mv "$SMLINUX"/r96proto-icon.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "cheaterex" ]; then 
		wget -q https://cdn.discordapp.com/attachments/710334795674288139/745150550382870548/bowser.png
		mv bowser.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "sm64-port" ]; then 
		wget -q https://cdn.discordapp.com/attachments/710334795674288139/745156574334550096/staricon.png
		mv staricon.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "sm64ex-coop" ]; then 
		wget -q https://cdn.discordapp.com/attachments/710334795674288139/741732375074963556/luigihudicon.png
		mv luigihudicon.png "$SHARE"/icons/"$PRESET".png
	elif [ -f "$BASEPATH"/"$PRESET"/textures/segment2/segment2.05A00.rgba16.png ]; then
		cp "$BASEPATH"/"$PRESET"/textures/segment2/segment2.05A00.rgba16.png "$SHARE"/icons/"$PRESET".png
		echo 16x16 image from ROM used.  Reccommend replacing "$SHARE"/icons/"$PRESET".png
	else 
		echo WARNING: No icon found. 
		echo Reccommend creating "$SHARE"/icons/"$PRESET".png
	fi	
else
	echo Icon already exists.
fi
if [ "$PRESET" = "sm64ex-coop" ] && [ -f "$SHARE"/applications/"$PRESET".desktop ]; then
	rm "$SHARE"/applications/"$PRESET".desktop
	# this is cuz i messed up the old one the first week or so, will take this out later
fi

if [ ! -f "$SHARE"/applications/"$PRESET".desktop ] && [ "$OSX_BUILD" = 0 ]; then
	echo Creating desktop shorcut and menu entry...
	echo '[Desktop Entry]
Encoding=UTF-8
Type=Application
StartupNotify=false
Categories=Game;'>"$SHARE"/applications/"$PRESET".desktop
echo Icon="$SHARE"/icons/"$PRESET".png >>"$SHARE"/applications/"$PRESET".desktop
echo Name=Super Mario 64 \("$PRESET"\) >>"$SHARE"/applications/"$PRESET".desktop
	if [ "$PRESET" = "sm64pc" ] || [ "$PRESET" = "sm64ex" ] ; then
		echo Path="$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" >>"$SHARE"/applications/"$PRESET".desktop
		echo Exec=\""$BASEPATH"\"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e --cheats>>"$SHARE"/applications/"$PRESET".desktop
	elif [ "$PRESET" = "sm64ex-coop" ]; then
		echo Path="$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" >>"$SHARE"/applications/"$PRESET".desktop
		echo Exec=\""$BASEPATH"\"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e --cheats --skip-intro >>"$SHARE"/applications/"$PRESET".desktop
	elif [ "$PRESET" = "sm64-port" ]; then
		echo Path="$SHARE"/"$PRESET" >>"$SHARE"/applications/"$PRESET".desktop
		printf "Exec=sh -c \"" >>"$SHARE"/applications/"$PRESET".desktop
		echo \""$BASEPATH"\"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e';echo'\" >>"$SHARE"/applications/"$PRESET".desktop
	elif [ "$PRESET" = "sm64nx" ]; then
		echo Path="$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" >>"$SHARE"/applications/"$PRESET".desktop
		echo Exec=\""$BASEPATH"\"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e>>"$SHARE"/applications/"$PRESET".desktop
	else
		echo Path="$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" >>"$SHARE"/applications/"$PRESET".desktop
		echo Exec=\""$BASEPATH"\"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e --cheats --savepath "$SHARE"/"$PRESET" >>"$SHARE"/applications/"$PRESET".desktop
	fi
	if [ -d ${XDG_DESKTOP_DIR:-$HOME/Desktop} ]; then
		cp "$SHARE"/applications/"$PRESET".desktop ${XDG_DESKTOP_DIR:-$HOME/Desktop}
	fi
elif [ "$OSX_BUILD" = 1 ]; then
	echo Creating macOS AppImage and Desktop Shortcut. ..
 	if [ -f /Applications/'Super Mario 64 ('"$PRESET"')'.app ]; then
 		rm -rf /Applications/'Super Mario 64 ('"$PRESET"')'.app 
	fi
	cd "$BASEPATH"/"$PRESET"
	GITVER=`git rev-parse --short HEAD`
	cd /Applications
	~/go/bin/appify -name 'Super Mario 64 ('"$PRESET"')' -icon "$SHARE"/icons/"$PRESET".png -author smlinux --version "$GITVER" --id "$GIT"-"$BRANCH" "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e
	if [ "$EXTERNAL_DATA" = 1 ] && [ ! -d "/Users/$USER/Library/Application Support"/"$PRESET"/res ]; then 
		ln -s "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res "/Users/$USER/Library/Application Support"/"$PRESET"
	fi
	if [ ! -d $HOME/Desktop/'Super Mario 64 ('"$PRESET"')'.app ]; then
		cd $HOME/Desktop
		ln -s /Applications/'Super Mario 64 ('"$PRESET"')'.app
	fi

else
	echo Menu entry desktop file already exists.
fi
}
rungame(){
if [ "$TARGET_WEB"  = 1 ]; then 
	cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
	ln -s sm64.us.f3dex2e.html index.html
	python3 -m http.server 8100 &
	if [ -f /usr/bin/firefox ]; then
		firefox --new-window http://localhost:8100&disown
	else
		xdg-open http://localhost:8100&disown
	fi
elif [ ! "$ANDROID" = 0 ] ; then
	if [ "$GOTPHONE" = 1 ]; then
		adb shell am start -n com.vdavid003.sm64port/.sm64portActivity
		if [ "$EXTERNAL_DATA" = 1 ]; then
			echo 
			echo When SM64 is launched screen will appear blank while external assets are loaded.
			echo Just wait...
		fi
	elif [ "$EXTERNAL_DATA" = 1 ]; then
		zenity --info --text="Your Android device was not detected so app could not be installed.\nYou must put base assets (base.zip or hdbase.zip) into\nInternal Storage/Android/data/com.vdavid003.sm64port/files\nThis folder will be created when you launch the apk." --title="Transfer External Resources!" --width=470
		echo
		echo "Your Android device was not detected so app could not be installed."
		echo "You must put base assets (base.zip or hdbase.zip) into"
		echo "Internal Storage/Android/data/com.vdavid003.sm64port/files"
		echo 
	fi
	xdg-open "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug &disown
elif [ "$PRESET"  = "sm64ex-coop" ] ; then
	cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
	./sm64.us.f3dex2e --server 27015 --cheats --skip-intro &disown
	sleep 0.3
	./sm64.us.f3dex2e --client 127.0.0.1 27015 --cheats --savepath ! --skip-intro &disown
elif [ "$TARGET" = "dos" ] && [ -f /usr/bin/dosbox ]; then
	dosbox "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.exe &disown
elif [ "$TARGET" = "dos" ]; then
	echo Cannot testDOS Version from Linux!  I reccomend FreeDOS in VirtualBox.
	xdg-open "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
elif [ "$OSX_BUILD" = 1 ]; then
	cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
	./sm64.us.f3dex2e --cheats &disown
else 
	gtk-launch "$PRESET"&disown
fi
}

####################################### The Beginning ########################################

SHARE=${XDG_DATA_HOME:-$HOME/.local/share}
SMLINUX="$SHARE"/sm64pc
LAUNCH_DIR=$(pwd)

if [ `uname` = "Darwin" ]; then
	PATHDIR=/usr/local/bin
else
	mapfile -t -d: <<<"$PATH"
	PATHDIR="${MAPFILE[0]}"
fi
if [ -z "$1" ] && [ ! -d "$SMLINUX"/.git ]; then
	COMMAND=build
elif [ "$1" = "-help" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "/?" ]; then
	COMMAND=help
elif [ ! $# -eq 0 ]; then
	COMMAND="$1"
	OP1="$2"
	OP2="$3"
	OP3="$4"
	OP4="$5"
elif command -v whiptail &> /dev/null; then
	export NEWT_COLORS='
	roottext=magenta,black     # title on top
	root=,black                # background
	window=,black              # window background
	border=brightblue,black
	textbox=magenta,black      # after spacebar
	title=blue,black           # make choice with arrows
	checkbox=brightcyan,black  # important list
	compactbutton=blue,black   # ok button'
	if ! COMMAND=$(whiptail --title "Make Choice with Arrows and [Space Bar]" --nocancel --radiolist "        After spacebar press [Enter] to proceed." 14 60 7 \
	 --backtitle "     Super Mario 64 Install * Build * Update Script for Linux and macOS" \
	"update" "update sm64 source and rebuild it" ON \
	"build" "get new sm64 source and build it" OFF \
	"clone" "get new sm64 source and extract rom" OFF \
	"reset" "reset smlinux config file to default" OFF \
	"config" "edit smlinux config file only" OFF \
	"depends" "install dependencies only" OFF \
	"upgrade" "upgrade smlinux only" OFF \
	3>&1 1>&2 2>&3); then
		# echo User escape.
		COMMAND=help
		OP1="--noweb"
	fi

fi
export NEWT_COLORS='
roottext=magenta,black     # title on top
root=,black                # background
window=,black              # window background
border=magenta,black        
textbox=brightcyan,black   # editor text
title=blue,black           # make choice with arrows
checkbox=brightcyan,black  # important list
compactbutton=blue,black   # ok button'
# Make sure folders and installer config file exist, if not create them.
if [ ! -d $HOME/.local ]; then 
	mkdir $HOME/.local
fi
if [ ! -d "$SHARE" ]; then 
	mkdir "$SHARE"
fi
if [ ! -f ~/.smlinuxUpdate ]; then
	if [ "$COMMAND" = "config" ]; then
		editconfig
		echo "Thank you for editing your smlinux config file." 
		echo "Do you know how to write a GUI to edit it?"
		echo "If so I would love to use it as a front end."
		echo
		exit
	elif [ "$COMMAND" = "reset" ]; then
		rm "$SMLINUX"/smlinuxcfg.txt
		makeconfig
		echo
		echo smlinux configuration file has been reset to default.
		echo
		exit
	elif [ "$COMMAND" = "upgrade" ]; then
		echo Script upgrade only proceeding...
	elif [ ! -f "$SMLINUX"/smlinuxcfg.txt ]; then
		echo smlinux configuration file not found, so making a new one...
		makeconfig
		doconfig
	elif [ ! "$COMMAND" = "help" ] && [ ! "$COMMAND" = "depends" ]; then
		loadconfig "$COMMAND" "$2" "$3" "$4" "$5" "$6"
		if [ "$CONFIG" = 1 ]; then 
			doconfig
		fi
	fi
	if [ -f "$SMLINUX"/smlinuxcfg.txt ]; then
		echo Loading "$SMLINUX"/smlinuxcfg.txt...
		loadconfig "$COMMAND" "$2" "$3" "$4" "$5" "$6"
	fi
	#Play a sound clip for no reason - thank you for playing my game.
	if [ -f /usr/bin/mplayer ] || [ -f /bin/mplayer ]; then
		if [ -f "$BASEPATH"/sm64pc/sound/samples/sfx_mario_peach/0D.aiff ]; then
			mplayer -nolirc -really-quiet "$BASEPATH"/sm64pc/sound/samples/sfx_mario_peach/0D.aiff&
		elif [ -f "$BASEPATH"/sm64ex/sound/samples/sfx_mario_peach/0D.aiff ]; then
			mplayer -nolirc -really-quiet "$BASEPATH"/sm64ex/sound/samples/sfx_mario_peach/0D.aiff&
		elif [ -f "$BASEPATH"/render96ex/sound/samples/sfx_mario_peach/0D.aiff ]; then
			mplayer -nolirc -really-quiet "$BASEPATH"/render96ex/sound/samples/sfx_mario_peach/0D.aiff&
		elif [ -f "$BASEPATH"/sm64-port/sound/samples/sfx_mario_peach/0D.aiff ]; then
			mplayer -nolirc -really-quiet "$BASEPATH"/sm64-port/sound/samples/sfx_mario_peach/0D.aiff&
		fi
	fi
else
	loadconfig "$COMMAND" "$2" "$3" "$4" "$5" "$6"
fi

if [ "$COMMAND" = "purge" ] || [ "$1" = "--purge" ]; then
	
	echo Wiping...
	rm -rf "$BASEPATH"/sm64pc
	rm -rf "$BASEPATH"/sm64ex
	rm -rf "$BASEPATH"/sm64-port
	rm -rf "$BASEPATH"/sm64nx
	rm -rf "$BASEPATH"/render96ex
	rm -rf "$BASEPATH"/r96proto
	rm -rf "$BASEPATH"/cheaterex
	rm -rf "$BASEPATH"/sm64ex-coop
	rm -rf "$BASEPATH"/sm64-port-android.base
	rm -rf "$BASEPATH"/sm64pc.old
	rm -rf "$BASEPATH"/sm64ex.old
	rm -rf "$BASEPATH"/sm64-port.old
	rm -rf "$BASEPATH"/sm64nx.old
	rm -rf "$BASEPATH"/render96ex.old
	rm -rf "$BASEPATH"/r96proto.old
	rm -rf "$BASEPATH"/cheaterex.old
	rm -rf "$BASEPATH"/sm64ex-coop.old
	rm -rf "$BASEPATH"/sm64-port-android.base.old
	rm -rf "$SMLINUX"
	rm -rf "$SHARE"/sm64ex	
	rm -rf "$SHARE"/sm64-port
	rm -rf "$SHARE"/sm64nx
	rm -rf "$SHARE"/render96ex
	rm -rf "$SHARE"/r96proto
	rm -rf "$SHARE"/cheaterex
	rm -rf "$SHARE"/sm64ex-coop
	rm "$SHARE"/icons/sm64*
	rm "$SHARE"/icons/render96ex*
	rm "$SHARE"/icons/r96proto*
	rm "$SHARE"/icons/cheaterex*
	rm "$SHARE"/applications/sm64*
	rm "$SHARE"/applications/render96ex*
	rm "$SHARE"/applications/r96proto*
	rm "$SHARE"/applications/cheaterex*
	rm ${XDG_DESKTOP_DIR:-$HOME/Desktop}/sm64*.desktop
	rm ${XDG_DESKTOP_DIR:-$HOME/Desktop}/render96ex*.desktop
	rm ${XDG_DESKTOP_DIR:-$HOME/Desktop}/r96proto*.desktop
	rm ${XDG_DESKTOP_DIR:-$HOME/Desktop}/cheaterex*.desktop
	rm $HOME/Downloads/smlinux.*
	echo Note this did not remove any packages installed as build tools or dependencies.
	echo Remove those with your package manager.  Devel libraries can always safely be removed.
	echo And of course you must delete smlinux itself from "$PATHDIR"
        exit
fi

if [ -f ~/.smlinuxUpdate ] && [ "$COMMAND" = "upgrade" ]; then 
	rm ~/.smlinuxUpdate
	echo Script Update Complete.
	exit
elif [ -f ~/.smlinuxUpdate ]; then 
	rm ~/.smlinuxUpdate
	echo Script Update Complete.
else	     # The real start, the rest was script preperation and setup. 
	echo '/---------------------------'"$TIMESTAMP"'-------------------------------------\'
	echo "|                                                                              |"
	echo "|     Super Mario 64 Install * Build * Update Script for Linux and macOS       |"
	echo "|                                                                              |"
	echo "|               Command Line Usage: smlinux <command> <options>                |"
	echo "| Commands                                                                     |"
	echo "|  update: Update existing sm64 source & rebuild, preserving modifications     |"
	echo "|   build: Get sm64 source from github & build (renames existing folder)       |"
	echo "|   clone: Get sm64 source from github & extract rom (without addons or build) |"
	echo "|  config: Opens smlinuxcfg.txt in a text editor (without building)            |"
	echo "|   reset: Resets smlinux configuration file to default settings               |"
	echo "| depends: Install dependencies (automatic before first build)                 |"
	echo "| upgrade: Upgrade smlinux to latest version from github (without building)    |"
	echo "|   purge: Delete all files obtained or created by smlinux including sm64      |"
	echo "|    help: Display all smlinux commands and options plus open faq url          |"
	echo "|                                                                              |"
	if [ "$COMMAND" = "help" ]; then
		echo "| Options:   --hd Install HD Add-Ons (Override EnableHD=0 and UpgradeHD=0)     |"
		echo "|           --sgi Install SGI 1.3/coop Models (Override InstallSGI=0)          |"
		echo "|        --config Prompt to edit config file (Override CONFIG=0)               |"
		echo "|       --depends Install Dependencies before update or build                  |"
		echo "|                                                                              |"
		echo "--------------------------------------------------------------------------------"
		if [ "$OP1" = "--noweb" ]; then
			echo
			exit
		else
			echo "More help at https://github.com/enigma9o7/smlinux#frequently-asked-questions"
		fi
		if [ "$OSX_BUILD" = 1 ]; then
			open https://github.com/enigma9o7/smlinux#frequently-asked-questions
		else
			xdg-open https://github.com/enigma9o7/smlinux#frequently-asked-questions &disown
		fi
		exit
	else
		echo "--------------------------------------------------------------------------------"
	fi
	echo [1] Preparing Build environment...
	if [ ! -d "$SMLINUX"/.git ] || [ "$DEPENDS" = 1 ] || [ "$COMMAND" = "depends" ]; then
		if [ "$OSX_BUILD" = 1 ]; then
			echo "Installing dependencies for macOS..."
			if ! command -v brew &> /dev/null; then
    			echo Installing Homebrew package manager...
				bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
			fi
			if ! command -v brew &> /dev/null; then
				echo FATAL ERROR Could not install homebrew, thus cannot install other stuff.  
				endnow
			fi
			brew install libxdg-basedir coreutils go wget newt nano unzip unrar p7zip python3 
			brew install git make gcc@9 mingw-w64 sdl2 pkg-config glew glfw3 libusb audiofile 
			alias gcc='gcc-9';alias cc='gcc-9';alias g++='g++-9';alias c++='c++-9'
			if [ ! -f ~/.bashrc ]; then
				echo "alias gcc='gcc-9';alias cc='gcc-9';alias g++='g++-9';alias c++='c++-9'" > ~/.bashrc
			fi
			go get github.com/machinebox/appify
		elif [ -f /usr/bin/apt ]; then
			echo "Updating Package list and Installing dependencies..."
			sudo apt update
			$Linux
		else
			echo "Installing Linux dependencies specified in smlinux configuration file..."
			$Linux
		fi
	fi
	if [ "$PRESET" = "sm64nx" ] && ([ ! -d "$BASEPATH"/"$PRESET/build" ] || [ "$COMMAND" = "depends" ]); then
		echo "Installing required build tools for sm64nx..."
		pip3 install pillow zstandard tqdm xxhash
		gcccheck
	elif [ ! "$ANDROID" = 0 ]; then
		echo "Loading Android SDK Environment..."
		androidsdk
	elif [ "$TARGET_WEB" = 1 ]; then
		echo "Loading Enscriptem for Web Target..."
		loademsdk
	elif [ "$TARGET" = "dos" ]; then
		echo "Loading djgpp for DOS Target..."
		dodos
	elif [ ! "$COMMAND" = "depends" ] && [ "$DEPENDS" = 0 ] && [ -d "$SMLINUX"/.git ]; then
		echo "This is not first build, skipping dependencies."
	fi
	if [ "$OSX_BUILD" = 1 ]; then
		alias gcc='gcc-9';alias cc='gcc-9';alias g++='g++-9';alias c++='c++-9'
	fi
	if [ "$COMMAND" = "depends" ]; then
		theend
	fi
	if [ -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
		if [ ! -f "$BASEPATH"/"$PRESET"/baserom."$VERSION".z64 ]  && [ -d "$BASEPATH"/"$PRESET" ]; then
			ln -s "$SMLINUX"/baserom."$VERSION".z64 "$BASEPATH"/"$PRESET"/baserom."$VERSION".z64
		fi
	elif [ ! "$COMMAND" = "upgrade" ]; then
		echo "Verifying ROM..."
		cd "$LAUNCH_DIR"
		if [ -f "$1" ]; then 
			cp "$1" "$SMLINUX"/baserom."$VERSION".z64
			vettrom
		fi
		if [ ! -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
			if [ -f "$BASEPATH"/sm64pc/baserom."$VERSION".z64 ]; then
				cp "$BASEPATH"/sm64pc/baserom."$VERSION".z64 "$SMLINUX"
				vettrom
			fi
			if [ -f "$BASEPATH"/sm64ex/baserom."$VERSION".z64 ] && [ ! -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
				cp "$BASEPATH"/sm64ex/baserom."$VERSION".z64 "$SMLINUX"
				vettrom
			fi
			if [ -f "$BASEPATH"/sm64-port/baserom."$VERSION".z64 ] && [ ! -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
				cp "$BASEPATH"/sm64-port/baserom."$VERSION".z64 "$SMLINUX"
			vettrom
			fi
		fi
		echo
		if [ -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
			echo Located and Verified.
		elif [ -f "$1" ]; then
			exec 2> >(grep -v GtkDialog >&2) # Supress GTK Dialog Warnings
			zenity --error --text="ERROR: Specified file is not original Super Mario 64 ROM image\nMake sure VERSION= is set to the correct region if not US romfile\n" --title="Your installation is incomplete." --width=640 &disown	
			sleep 1			
			echo "ERROR: Specified file is not original Super Mario 64 ROM image or VERSION set wrong."
			echo
		fi
		if [ ! "$COMMAND" = "upgrade" ]; then
			echo "Please select Super Mario 64 romfile to begin."	
			if [ "$OSX_BUILD" = 1 ]; then
				cd $HOME
				USERFILE=$(osascript -e 'set macpath to choose file' -e 'set unixpath to posix path of macpath')
			else
				exec 2> >(grep -v GtkDialog >&2) # Supress GTK Dialog Warnings
				USERFILE=`zenity --file-selection --title="Select your Super Mario 64 romfile" --filename $HOME/ --file-filter='romfiles | *.z64 *.v64 *.n64' --file-filter='allfiles | *'`
			fi
			if [ -f "$USERFILE" ]; then
				cp "$USERFILE" "$SMLINUX"/baserom."$VERSION".z64
				vettrom
			fi
			if [ ! -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
				echo
				echo "ERROR: Something didnt work like it was supposed to!"
				echo "Try dragging and dropping romfile into this terminal window from file manager."
				echo "Some terminals (including macOS) will paste the filename when you do that."
				echo "If that does not work, some filenmanagers (like pcmanfm) you can right click the"
				echo "file to select \"copy path\" then paste it here followed by enter. "
				echo "Lastly, you can try typing the full path and filename then press enter."
				echo "If that still does not work, romfile must be corrupt or its a smlinux problem."
				echo
				printf "Filename? "
				read USERFILE
				if [ -f "$USERFILE" ]; then
					cp "$USERFILE" "$SMLINUX"/baserom."$VERSION".z64
					vettrom
				fi
			fi
			if [ ! -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
				echo smlinux exiting incomplete. Need valid Super mario 64 N64 romfile to proceed.
				endnow
			fi
		else	
			echo WARNING: No ROM file found.  Please specify a romfile when you are ready to build.
		fi
	fi
	echo
	echo [2] Checking Github for smlinux updates....
	if [ "$AutoUpdate" = 1 ] || [ "$COMMAND" = "upgrade" ]; then
		scriptUpdate "$COMMAND" "$2" "$3" "$4" "$5" "$6"
	else
		echo "WARNING: AutoUpdate Disabled. You might be using an old version of smlinux!"
		echo "For the latest fixes and features, please set AutoUpdate=1 in configuration."
	fi
fi
if [ ! -d "$SHARE"/"$PRESET" ] && [ "$ANDROID" = 0 ] && [ "$TARGET_WEB" = 0 ]; then
	echo Creating "$SHARE"/"$PRESET" folder for game save and configuration.
	mkdir "$SHARE"/"$PRESET"
fi
if [ -f "$SHARE"/"$PRESET"/sm64config.txt ] || [ -f "$SHARE"/"$PRESET"/CHEATERex_config.txt ]; then
	echo SM64 configuration file already exists from previous build.
elif [ "$PRESET" = "sm64-port" ] || [ "$PRESET" = "sm64nx" ]; then
	echo No compatible sm64 configuration files for this version, game will create one.
elif [ "$TARGET_WEB" = 0 ] && [ "$ANDROID" = 0 ]; then
	if [ -f "$SHARE"/sm64ex/sm64config.txt ]; then
		cp "$SHARE"/sm64ex/sm64config.txt "$SHARE"/"$PRESET"
		echo Copied configuration from sm64ex.
	elif [ -f "$SMLINUX"/sm64config.txt ]; then
		cp "$SMLINUX"/sm64config.txt "$SHARE"/"$PRESET"
		echo Copied configuration from sm64pc.
	elif [ -f "$SHARE"/render96ex/sm64config.txt ]; then
		cp "$SHARE"/render96ex/sm64config.txt "$SHARE"/"$PRESET"
		echo Copied configuration from render96ex
	elif [ -f "$SHARE"/sm64ex-coop/sm64config.txt ]; then
		cp "$SHARE"/sm64ex-coop/sm64config.txt "$SHARE"/"$PRESET"
		echo Copied configuration from sm64ex-coop
	elif [ -f "$SHARE"/cheaterex/CHEATERex_config.txt ]; then
		cp "$SHARE"/cheaterex/CHEATERex_config.txt "$SHARE"/"$PRESET"/sm64config.txt
		echo Copied configuration from CHEATERex
	else 
		echo No compatible sm64 configuration file found, game will create one.
	fi
	if [ "$PRESET" = "cheaterex" ] && [ -f "$SHARE"/"$PRESET"/sm64config.txt ]; then
		mv "$SHARE"/"$PRESET"/sm64config.txt "$SHARE"/"$PRESET"/CHEATERex_config.txt
	fi
fi
if [ -f "$SHARE"/"$PRESET"/sm64_save_file.bin ] || [ -f "$SHARE"/"$PRESET"/CHEATERex_save_file.bin ] || [ -f "$SHARE"/"$PRESET"/sm64.sav ] || [ -f "$SHARE"/"$PRESET"/render96_save_file_0.sav ] ; then
	echo Save file already exists from previous build.
elif [ "$PRESET" = "r96proto" ] && [ -f "$SHARE"/render96ex/render96_save_file_0.sav ]; then
	cp "$SHARE"/render96ex/render96_save_file_0.sav "$SHARE"/"$PRESET"
	echo Copied Save file from Render96
elif [ "$PRESET" = "render96ex" ] && [ -f "$SHARE"/r96proto/render96_save_file_0.sav ]; then
	cp "$SHARE"/r96proto/render96_save_file_0.sav "$SHARE"/"$PRESET"
	echo Copied Save file from Render96 Fastbuild_Prototype
elif [ "$TEXTSAVES" = 1 ]; then
	echo No compatible save files for this version.
elif [ "$ANDROID" = 0 ] && [ "$TARGET_WEB" = 0 ]; then
	if [ "$PRESET" = "sm64-port" ] && [ -f "$SHARE"/sm64nx/sm64.sav ]; then
		cp "$SHARE"/sm64nx/sm64.sav "$SHARE"/"$PRESET"/sm64_save_file.bin
		echo Copied save file from sm64nx.
	elif [ "$PRESET" = "sm64nx" ] && [ -f "$SHARE"/sm64-port/sm64_save_file.bin ]; then
		cp "$SHARE"/sm64-port/sm64_save_file.bin "$SHARE"/"$PRESET"/sm64.sav
		echo Copied save file from sm64-port.
	elif [ -f "$SHARE"/sm64ex/sm64_save_file.bin ]; then
		cp "$SHARE"/sm64ex/sm64_save_file.bin "$SHARE"/"$PRESET"
		echo Copied save file from sm64ex.
	elif [ -f "$SHARE"/sm64-port/sm64_save_file.bin ]; then
		cp "$SHARE"/sm64-port/sm64_save_file.bin "$SHARE"/"$PRESET"
		echo Copied save file from sm64-port.
	elif [ -f "$SMLINUX"/sm64_save_file.bin ]; then
		cp "$SMLINUX"/sm64_save_file.bin "$SHARE"/"$PRESET"
		echo Copied save file from sm64pc.
	elif [ -f "$SHARE"/cheaterex/CHEATERex_save_file.bin ]; then
		cp "$SHARE"/cheaterex/CHEATERex_save_file.bin "$SHARE"/"$PRESET"/sm64_save_file.bin
		echo Copied save file from cheaterex
	elif [ -f "$SHARE"/sm64nx/sm64.sav ]; then
		cp "$SHARE"/sm64nx/sm64.sav "$SHARE"/"$PRESET"/sm64_save_file.bin
		echo Copied save file from sm64nx.
	else 
		echo No compatible save file found.
	fi
	if [ "$PRESET" = "cheaterex" ] && [ -f "$SHARE"/"$PRESET"/sm64_save_file.bin ]; then
		mv "$SHARE"/"$PRESET"/sm64_save_file.bin "$SHARE"/"$PRESET"/CHEATERex_save_file.bin
	fi
fi
if [ "$COMMAND" = "update" ] || [ "$1" = "--update" ]; then
	if [ ! -d "$BASEPATH"/"$PRESET" ]; then
		echo
		echo ERROR: No "$BASEPATH"/"$PRESET" folder to update!
		echo Specify smlinux build for a fresh build.
		exit
	fi
	echo
	echo [3] Checking "$PRESET" github repository for updates...
	if [ ! "$ANDROID" = 0 ]; then
		cd "$BASEPATH"/"$ANDROID"
	else
		cd "$BASEPATH"/"$PRESET"
	fi
	if [ "$PRESET" = "sm64nx" ]; then
		rm import/.assets-local.txt
	fi
	git fetch
	if [ "$(git diff HEAD origin/HEAD)" != "" ]; then
		echo Attempting to merge updates....
		 git merge
	fi
	if [ "$?" = "1" ]; then
		cd "$BASEPATH"/"$PRESET"
		echo Source update attempt failed, removing patches...
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/3d_coin*.patch ]; then
			git apply -R enhancements/3d_coin*.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps ]; then
			git apply -R enhancements/60fps*.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/CHEATER.patch ]; then
			git apply -R enhancements/CHEATER.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/menu-arrows.patch ]; then
			git apply -R enhancements/menu-arrows.patch
		fi
		git merge
		if [ "$?" = "1" ]; then
			echo ERROR: Unable to merge source updates from github.
			echo Rebuild will continue with existing source.
		else
			echo Update Succesful.
		fi
		echo Reapplying previously removed patches...
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps ]; then
			echo 60fps...
			git apply enhancements/60fps*.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/3d_coin*.patch ]; then
			echo 3D Coins...
			git apply enhancements/3d_coin*.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/CHEATER.patch ]; then
			echo Cheater...
			git apply enhancements/CHEATER.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/menu-arrows.patch ]; then
			echo Menu Arrows...
			git apply enhancements/menu-arrows.patch
		fi
	fi
	if [ ! "$ANDROID" = 0 ]; then
		git submodule init
		git submodule update	
		if [ -d "$BASEPATH"/"$ANDROID"/app/build ]; then
			echo Wiping old Android Build...
			rm -rf "$BASEPATH"/"$ANDROID"/app/build
			rm -rf "$BASEPATH"/"$ANDROID"/app/.externalNativeBuild
		fi
	fi
	echo
	echo [4] Applying pre-build modifications...
	if [ "$UpdateHD" = 1 ] && [ "$InstallHD" = 1 ]; then
		dohd
	elif [ "$InstallSGI" = 1 ]; then
		printf "SGI Selected, Processing...\n"
		dosgi
	else
		echo WARNING: HD add-ons and updates are disabled in smlinux configuration.
		echo set InstallHD=1 and UpdatehD=1 if you would like these installed and udpated.
	fi
	if  [ "$PRESET" = "sm64ex" ] || [ "$PRESET" = "render96ex" ] || [ "$ANDROID" = "androidex" ] || [ "PRESET" = "sm64exweb" ]; then 
		docheats
		domymenu
	elif [ "$PRESET" = "sm64ex-coop " ]; then
		domymenu
	elif [ "$PRESET" = "cheaterex" ] && [ ! -f "$BASEPATH"/"$PRESET"smo.cappy_assets.zip ]; then
		echo Getting smo cappy assets as required for cheaterex
		cd "$BASEPATH"/"$PRESET" 
		wget -q https://cdn.discordapp.com/attachments/723992726319792140/754402820588961882/smo.cappy_assets.zip
		unzip -q -o smo.cappy_assets
	fi
	if [ "TARGET_WEB" = 1 ] && [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps ]; then
		echo Removing 60fps for web target...
		git apply -R enhancements/60fps*.patch
		rm enhanements/60fps			
	fi
	echo		
	echo [5] Compiling...
	if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" ]; then
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old ]; then
			rm -rf "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old
		fi
		mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old
	fi
	domake
	echo
	if [ ! -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2* ]; then
		echo "ERROR: Build Failure - output file not found."  
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old ]; then
			echo "Restoring previous build..."
			if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" ]; then 
				rm -rf "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" 
			fi
			mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
		fi
		endnow
	fi
	if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/res ]; then
		echo [6] Restoring External Resources...
		cp -rpn "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/res/. "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
	elif [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/romfs ]; then
		echo "[6] Restoring Savefile, ROM and ROM Filesystem (paks)"
		cp -rpn "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/romfs/. "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs
		ln -s "$SHARE"/"$PRESET"/sm64.sav "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.sav 
		ln -s "$SHARE"/"$PRESET"/sm64.log "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.log 
		ln -s "$SHARE"/"$PRESET"/conf.bin "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/conf.bin
	 	ln -s "$SHARE"/"$PRESET"/gamepad1.bindings.json "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/gamepad1.bindings.json
		ln -s "$SHARE"/"$PRESET"/keyboard1.bindings.json "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/keyboard1.bindings.json
		ln -s "$SMLINUX"/baserom."$VERSION".z64 "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/baserom."$VERSION".z64
	elif [ "$PRESET" = "sm64nx" ]; then
		echo "[6] Preparing Savefile, ROM and ROM Filesystem (paks)"
		prepnx	
	else
		echo [6] No resources found in previous build, skipping restore.
	fi
	if [ ! "$ANDROID" = 0 ] && [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/gfx ]; then
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
		zip -r -0 -u hdbase gfx
		rm -rf gfx
	fi
	echo
	if [ "$TARGET" = "web" ]; then
		echo [7] Update Complete.  
	elif [ ! "$ANDROID" = 0 ] && [ ! -f "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/app-debug.apk ]; then
		echo
		echo "ERROR: Build Failure.  Android Package Kit (apk) not found."
		endnow
	elif [ "$ANDROID" = 0 ] && [ "$TARGET" = "pc" ] ; then
		echo [7] Verifying Menu Entry....
		makedesktop
		echo
		echo [8] Update Complete.  
	elif [ ! "$ANDROID" = 0 ]; then
		mv "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/app-debug.apk "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/sm64."$VERSION".f3dex2e.apk
		echo [7] Update Complete. 
	elif [ "$TARGET" = "dos" ]; then
		mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e.exe "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.exe
		echo [7] Update Complete. 
	fi
	rungame
	if [ "$TARGET" = "dos" ] && [ ! -f /usr/bin/dosbox ]; then
		true
	elif [ "$EXTERNAL_DATA" = 0 ]; then
		sleep 5
	elif  ([ "$PRESET" = "render96ex" ] || [ "$PRESET" = "r96proto" ]) && [ "$InstallHD" = 1 ]; then
		sleep 30
	else 
		sleep 10
	fi
	theend
fi
if [ -d "$BASEPATH"/"$PRESET" ]; then
	if [ ! "$ANDROID" = 0 ]; then
		echo WARNING: "$ANDROID" directory already exists! 
		echo Renaming to "$BASEPATH"/"$ANDROID".old...
		if [ -d "$BASEPATH"/"$ANDROID".old ]; then
			rm -rf "$BASEPATH"/"$ANDROID".old
		fi
		mv "$BASEPATH"/"$ANDROID" "$BASEPATH"/"$ANDROID".old
	else
		echo WARNING: "$PRESET" directory already exists!  Renaming to "$PRESET".old...
		if [ -d "$BASEPATH"/"$PRESET".old ]; then
			rm -rf "$BASEPATH"/"$PRESET".old
		fi
		mv "$BASEPATH"/"$PRESET" "$BASEPATH"/"$PRESET".old
	fi
fi
if [ ! -d "$BASEPATH"/"$PRESET" ]; then
	cd "$BASEPATH"
	if [ ! "$ANDROID" = 0 ]; then
		printf "\n[3] Downloading Android source from github... \n"
		git clone https://github.com/"$GIT" -b "$BRANCH" "$ANDROID"
		cd "$ANDROID"
		git submodule init
		git submodule update
		./getSDL.sh
	else
		printf "\n[3] Downloading sm64 source from github... \n"
		git clone https://github.com/"$GIT" -b "$BRANCH" "$PRESET"
	fi
	if [ "$PRESET" = "cheaterex" ]; then
		echo Getting smo cappy assets as required for cheaterex
		cd "$BASEPATH"/"$PRESET" 
		wget -q https://cdn.discordapp.com/attachments/723992726319792140/754402820588961882/smo.cappy_assets.zip
		unzip -q -o smo.cappy_assets
	fi
else
	echo ERROR: Could not rename old folder so cannot clone new one.
	echo Proceeding with existing source.
fi
if [ ! -d "$BASEPATH"/"$PRESET" ]; then
	echo "ERROR: Could not reach github."
	endnow
elif [ ! -f "$BASEPATH"/"$PRESET"/baserom."$VERSION".z64 ]; then
	ln -s "$SMLINUX"/baserom."$VERSION".z64 "$BASEPATH"/"$PRESET"/baserom."$VERSION".z64
fi

echo
echo [4] Extracting Assets from ROM...
if [ "$PRESET" = "sm64nx" ]; then
	prepnx
else 	
	cd "$BASEPATH"/"$PRESET"
	./extract_assets.py "$VERSION"
fi
if [ "$COMMAND" = "clone" ]; then
	theend
fi
echo
echo [5] Applying Community Enhancements...
if [ "$InstallHD" = 1 ]; then 
	dohd
elif [ "$InstallSGI" = 1 ]; then
	dosgi
elif [ "$TARGET" = "pc" ]; then
	echo "WARNING: InstallHD Disabled in Config File."
fi
if  [ "$PRESET" = "sm64ex" ] || [ "$PRESET" = "render96ex" ] || [ "$ANDROID" = "androidex" ] || [ "PRESET" = "sm64exweb" ]; then 
	docheats
	domymenu
elif [ "$PRESET" = "sm64ex-coop" ]; then
	domymenu
fi
if [ "$BRANCH" = "sm64ex_nightly" ] && [ ! "$TOUCH_CONTROLS" = 1 ]; then
	cd "$BASEPATH"/"$PRESET"
	cp "$SMLINUX"/pro1.patch enhancements
	echo "Applying Pro¹ Configuration File..."
	git apply enhancements/pro1.patch
fi
echo
echo [6] Compiling...
echo
if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" ]; then
	mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old
fi
domake
if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/res ]; then
	cp -rpn "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/res/. "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
elif [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/romfs ]; then
	echo "[6] Restoring Savefile, ROM and ROM Filesystem (paks)"
	cp -rpn "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/romfs/. "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs
fi
if [ ! -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2* ]; then
	echo
	echo ERROR: Build Failure.  Expected binary file not found.
	endnow
elif [ ! "$ANDROID" = 0 ] && [ ! -f "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/app-debug.apk ]; then
	echo
	echo ERROR: Build Failure.  Expected apk file not found.
	endnow
elif [ ! "$ANDROID" = 0 ]; then
	mv "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/app-debug.apk "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/sm64."$VERSION".f3dex2e.apk
elif [ "$TARGET" = "dos" ]; then
	mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e.exe "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.exe
fi

echo
if [ "$TARGET" = "pc" ] && [ "$ANDROID" = 0 ]; then
	echo [7] Creating Desktop Shortcut and Menu Entry...
	makedesktop
else
	echo [7] Skipping menu entry for non PC version.
fi
echo
echo [8] Build Succesful!  Testing Application Launch.
rungame
if [ -f "$HOME"/.smlinuxNopath ]; then
	rm "$HOME"/.smlinuxNopath
	exec 2> >(grep -v GtkDialog >&2) # Supress GTK Dialog Warnings
	zenity --info --text='You did not have a home folder in your path so $HOME/bin was created.\n\nReboot or type \n\n    PATH=$HOME/bin:$PATH\n\nbefore running smlinux again.' --title="Your installation is complete." --width=450	
	printf '\nYou did not have a home folder in your path so $HOME/bin was created.\n\nReboot or type \n\n      PATH=$HOME/bin:$PATH\n\nbefore running smlinux again.\n\n'
elif [ "$EXTERNAL_DATA" = 0 ]; then
	sleep 4
elif  ([ "$PRESET" = "render96ex" ] || [ "$PRESET" = "r96proto" ]) && [ "$InstallHD" = 1 ]; then
	sleep 28
else
	sleep 8
fi
theend