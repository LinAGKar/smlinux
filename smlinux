#!/bin/bash
# This should do everything required to build & install under Ubuntu and update itself.
# Other distros edit config file when prompted to change Linux= to command to get your dependencies.
# Dependencies for many distros are listed on the github FAQ.  Please let me know if incorrect
# or if you have another distro to add.
# 2020-0916-2356

domake(){
#Here We go & music to build to
if ( [ -f /usr/bin/mplayer ] || [ -f /bin/mplayer ] )  && [ -f "$SMLINUX"/File_Select_64_slowed_down.mp3 ]; then
	if [ -f "$BASEPATH"/"$PRESET"/sound/samples/sfx_mario/0C.aiff ]; then
		sh -c 'mplayer -nolirc -really-quiet '"$BASEPATH"/"$PRESET"'/sound/samples/sfx_mario/0C.aiff;mplayer -nolirc -really-quiet -volume 40 -loop 0 '"$SMLINUX"'/File_Select_64_slowed_down.mp3&'
	elif [ -f "$BASEPATH"/sm64ex/sound/samples/sfx_mario/0C.aiff ]; then
		sh -c 'mplayer -nolirc -really-quiet '"$BASEPATH"'/sm64ex/sound/samples/sfx_mario/0C.aiff;mplayer -nolirc -really-quiet -volume 40 -loop 0 '"$SMLINUX"'/File_Select_64_slowed_down.mp3&'
	else
		sh -c 'mplayer -nolirc -really-quiet -volume 40 -loop 0 '"$SMLINUX"'/File_Select_64_slowed_down.mp3&'
	fi
fi 
if [ "$TARGET_WEB" = 1 ] && [ "$InstallHD" = 1 ]; then
	sed -i 's/TOTAL_MEMORY=20MB/TOTAL_MEMORY=40MB/g' "$BASEPATH"/"$PRESET"/Makefile
elif [ "$TARGET_WEB" = 1 ]; then
	sed -i 's/TOTAL_MEMORY=20MB/TOTAL_MEMORY=30MB/g' "$BASEPATH"/"$PRESET"/Makefile
fi
if [ ! "$ANDROID" = 0 ]; then
	exec 2> >(grep -v GtkDialog >&2) # Supress GTK Dialog Warnings
	checkphone
	if [ "$GOTPHONE" = 1 ]; then
		zenity --info --text='\nPhone Detected.  Be sure to grant it debugging permission.\n\nExisting copies must also be removed from device.' --title="Preparing for Android Installation...." --width=440 &disown
	else
		echo "If you want the app installed to your Android device,"
		echo "plug it in now via USB and grant it debugging permission."
		zenity --info --text='\nIf you want the app installed to your Android device, attach it via USB.\n\nGrant it debugging permission before this window disappears.\n\nExisting copies must also be removed from device.' --title="Preparing for Android Installation...." --width=480 &disown
		echo
	fi
fi
if [ "$PRESET" = "sm64nx" ]; then
	sed -i 's/-no-pie -lpthread -lzstd/-no-pie -lpthread -lzstd -lstdc++fs/g' "$BASEPATH"/"$PRESET"/Makefile
fi
if [ -f "$SMLINUX"/buildlog.txt ]; then
	mv -f "$SMLINUX"/buildlog.txt "$SMLINUX"/buildlog.old
fi
cd "$BASEPATH"/"$PRESET"
time make BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA DISCORDRPC=$DISCORDRPC VERSION=$VERSION RENDER_API=$RENDER_API TARGET_WEB=$TARGET_WEB TEXTSAVES=$TEXTSAVES -j"$MAXJOBS" LEGACY_RES=$LEGACY_RES DEBUG=$DEBUG IMMEDIATELOAD=$IMMEDIATELOAD TARGET_RPI=$TARGET_RPI ENABLE_OPENGL_LEGACY=$ENABLE_OPENGL_LEGACY DOS_GL=$DOS_GL > "$SMLINUX"/buildlog.txt
if [ ! "$ANDROID" = 0 ]; then
	if [ "ARMONLY" = 1 ]; then
		sed -i "s/v8a', 'x86', 'x86_64'/v8a'/g" "$BASEPATH"/"$PRESET"/../../build.gradle
	fi
	if [ "$BRANCH" = "sm64ex" ] || [ "$BRANCH" = "sm64ex_nightly" ]; then
		make BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA DISCORDRPC=$DISCORDRPC VERSION=$VERSION RENDER_API=$RENDER_API TARGET_WEB=$TARGET_WEB TEXTSAVES=$TEXTSAVES -j"$MAXJOBS" LEGACY_RES=$LEGACY_RES DEBUG=$DEBUG  > "$SMLINUX"/buildlog.txt
		sed -i '/include $(BUILD_SHARED_LIBRARY)/i TEXTURE_FIX ?= 0\nNODRAWINGDISTANCE ?= 0\nBETTERCAMERA ?= 0\nifeq ($(TEXTURE_FIX),1)\n  LOCAL_CFLAGS += -DTEXTURE_FIX\nendif\nifeq ($(NODRAWINGDISTANCE),1)\n  LOCAL_CFLAGS += -DNODRAWINGDISTANCE\nendif\nifeq ($(BETTERCAMERA),1)\n  LOCAL_CFLAGS += -DBETTERCAMERA\nendif\n' "$BASEPATH"/"$PRESET"/Android.mk
	fi
	if [ ! -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2* ]; then
		return
	else
		echo
		echo Native Build Succesful.
	fi
	cd "$BASEPATH"/"$ANDROID"
	checkphone
	echo Android Package Kit build starting...
	killall -q zenity
	if [ "$GOTPHONE" = 1 ]; then
		echo Do not disconnect phone until complete.
		echo
		TOUCH_CONTROLS=$TOUCH_CONTROLS BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA VERSION=$VERSION TEXTSAVES=$TEXTSAVES ./gradlew installDebug -q
	else
		echo WARNING: Phone not detected, building without installing.
		echo
		TOUCH_CONTROLS=$TOUCH_CONTROLS BETTERCAMERA=$BETTERCAMERA NODRAWINGDISTANCE=$NODRAWINGDISTANCE TEXTURE_FIX=$TEXTURE_FIX EXTERNAL_DATA=$EXTERNAL_DATA VERSION=$VERSION TEXTSAVES=$TEXTSAVES ./gradlew assembleDebug -q
	fi
	if [ "ARMONLY" = 1 ]; then
		rm app/build.gradle
		git checkout app/build.gradle
	fi
	cd "$BASEPATH"/"$PRESET"
	rm Android.mk
	git checkout Android.mk
	if [ "$EXTERNAL_DATA" = 1 ] && [ "$InstallHD" = 1 ]; then
		echo Preparing external data for transfer...
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
		if [ -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/res/hdbase.zip ]; then
			cp "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/res/hdbase.zip "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
		else
			unzip hq_sounds_v5.1
		fi
		unzip -n base
		zip -r -0 -u hdbase gfx sound
		ln -s "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/hdbase.zip "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/hdbase.zip
		rm -rf sound gfx
	elif [ "$EXTERNAL_DATA" = 1 ]; then
		ln -s "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/base.zip "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/base.zip
	fi
	checkphone
	if [ "$GOTPHONE" = 1 ] && [ "$EXTERNAL_DATA" = 1 ]; then
		echo
		echo Pushing external assets to phone...
		if [[ ! `adb shell ls /sdcard/Android/data/com.vdavid003.sm64port 2> /dev/null` ]]; then
			adb shell mkdir /sdcard/Android/data/com.vdavid003.sm64port
			adb shell mkdir /sdcard/Android/data/com.vdavid003.sm64port/files
		fi
		if [ -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/hdbase.zip ]; then
			adb push "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/hdbase.zip /sdcard/Android/data/com.vdavid003.sm64port/files/
		elif [ "$EXTERNAL_DATA" = 1] && [ -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/base.zip ]; then
			adb push "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/base.zip /sdcard/Android/data/com.vdavid003.sm64port/files/
		fi
	fi
elif [ "$TARGET" = "dos" ]; then
	ln -s "$BASEPATH"/djgpp/csdpmi/CWSDPMI.EXE "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/
elif [ "$PRESET" = "sm64nx" ] || ( [ "$TARGET_WEB" = 1 ] && [ "$InstallHD" = 1 ] ); then
	cd "$BASEPATH"/"$PRESET"
	rm Makefile
	git checkout Makefile
fi
if [ -f /usr/bin/mplayer ] && [ -f "$SMLINUX"/File_Select_64_slowed_down.mp3 ]; then
	killall -q -y1h mplayer
fi
}

androidsdk(){
if [ -f /usr/bin/apt ] && [ ! -d /usr/lib/android-sdk ]; then
	sudo apt install android-sdk -y
fi
if [ ! -f "$BASEPATH"/android-sdk/tools/bin/sdkmanager ]; then
	cd "$BASEPATH"
	wget -q https://dl.google.com/android/repository/commandlinetools-linux-6609375_latest.zip
	unzip -o commandlinetools-linux-6609375_latest -d android-sdk
	rm commandlinetools-linux-6609375_latest.zip
fi
PATH="$BASEPATH"/android-sdk/tools/bin:$PATH
export PATH="$BASEPATH"/android-sdk/tools/bin:$PATH
export ANDROID_HOME="$BASEPATH"/android-sdk
if [ ! -d "$BASEPATH"/android-sdk/licenses ]; then
	yes | sdkmanager --sdk_root=${ANDROID_HOME} --licenses
fi
if [ ! -d "$BASEPATH"/android-sdk/ndk-bundle ]; then
	sdkmanager --install --sdk_root=${ANDROID_HOME} ndk-bundle
fi
}

checkphone(){
adb get-state 1>/dev/null 2>&1 && GOTPHONE=1
}

gcccheck(){
if [ -f /usr/bin/gcc ] || [ -f /bin/gcc ]; then
	if [ `gcc -dumpfullversion -dumpversion` \> 7.99 ]; then
		echo gcc 8 or higher confirmed
		return
	fi
fi 
if [ -f /usr/bin/apt ] || [ -f /bin/apt ]; then		
	echo Attempting to install gcc 9.
	echo | sudo add-apt-repository ppa:ubuntu-toolchain-r/test
	sudo apt install -y g++-9
	sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 80 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9
	if [ `gcc -dumpversion` \> 8.99 ]; then
		echo gcc 9 succesfully installed
		return
	else
		echo Attempting to install gcc 8.
		sudo apt install -y g++-8
		sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 80 --slave /usr/bin/g++ g++ /usr/bin/g++-8 --slave /usr/bin/gcov gcov /usr/bin/gcov-8
		if [ `gcc -dumpversion` \> 7.99 ]; then
			echo gcc 8 succesfully installed
			return
		fi
	fi			
fi
echo "ERROR: smlinux doesn't think your C compiler is not new enough for sm64nx."
echo "gcc -dumpfullversion must report 8 or higher."
echo "Please install it then rerun smlinux, or use another repo."
echo "Sometimes its wrong - if you have gcc 8/9/10 and wish to continue, do so."
echo
exec 2> >(grep -v GtkDialog >&2) # Supress GTK Dialog Warnings
if zenity --question --text="sm64nx requires gcc 8 or newer and was not detected.\nDo you wish to continue anyway incase smlinux is reading gcc -dumpversion wrong,\nor abort so you can install it then run smlinux again?" --title "GCC 8 or newer not detected" --ok-label="Abort" --cancel-label="Continue" --width 550; then
	exit
fi
}

vettrom(){
local romfile="$SMLINUX"/baserom."$VERSION"
if [ "$VERSION" = "us" ]; then
	hashcheck(){ 
	HASH=`sha1sum "$romfile".z64 | grep 9bef1128717f958171a4afac3ed78ee2bb4e86ce`
	}
elif [ "$VERSION" = "jp" ]; then
	hashcheck(){ 
	HASH=`sha1sum "$romfile".z64 | grep 8a20a5c83d6ceb0f0506cfc9fa20d8f438cafe51`
	}
elif [ "$VERSION" = "eu" ]; then
	hashcheck(){
	HASH=`sha1sum "$romfile".z64 | grep 4ac5721683d0e0b6bbb561b58a71740845dceea9`
	}
elif ["$VERSION" = "sh" ]; then
	hashcheck(){
	HASH=`sha1sum "$romfile".z64 | grep 3f319ae697533a255a1003d09202379d78d5a2e0`
	}
fi
hashcheck
if [ "$HASH" = "" ]; then
	echo ROM failed initial hash check - attempting format conversion...
	cd "$SMLINUX"
	if [ ! -f "$SMLINUX"/n64swap.py ]; then
		wget http://github.com/Brawl345/N64Swap/blob/master/n64swap.py
		pip3 install numpy
	fi
	# Try V64
	mv "$romfile".z64 "$romfile".v64
	python3 n64swap.py "$romfile".v64 "$romfile".z64
	hashcheck
	if [ ! "$HASH" = "" ]; then
		echo Conversion from V64 succesful.
	else
		rm "$romfile".z64
		# Try N64
		mv "$romfile".v64 "$romfile".n64
		python3 n64swap.py "$romfile".v64 "$romfile".z64
		hashcheck
		if [ ! "$HASH" = "" ]; then
			echo Conversion from N64 succesful.
		else
			rm "$romfile".*
			echo Conversion still did not produce correct sha1sum.
		fi
	fi
fi
}

makeconfig(){
if [ ! -d "$SMLINUX" ]; then
	mkdir "$SMLINUX"
fi
echo '# PRESETs: sm64pc sm64-port sm64ex sm64nx render96ex sm64ex-coop sm64dos
# and: sm64-portweb sm64exweb sm64-port-android-base androidex cheaterex 
PRESET=sm64ex
InstallHD=1
# [ sm64ex and its forks ] 
BETTERCAMERA=1
NODRAWINGDISTANCE=1
TEXTURE_FIX=1
EXTERNAL_DATA=1
DISCORDRPC=1
# RENDER_API supports GL (2.1+) or GL_LEGACY (1.1+)
RENDER_API=GL
TEXTSAVES=0
# [ sm64ex-coop ]
IMMEDIATELOAD=1
# [ render96ex ]
LEGACY_RES=1
# [ Android ]
TOUCH_CONTROLS=1
ARMONLY=1
# [ DOS ]
ENABLE_OPENGL_LEGACY=1
# DOS_GL Supports dmesa (glide) or osmesa
DOS_GL=osmesa
ENABLE_OPENGL_LEGACY=1
# [ Advanced Settings ]
# VERSION supports us jp eu (must correspond to rom version)
VERSION=us
# set MAXJOBS=n to limit cpu threads used, i.e. MAXJOBS=1 or MAXJOBS=7
MAXJOBS=
# Set CONFIG=0 If you do not want to be automatically prompted before building.
CONFIG=1
# BASEPATH must exist and is where folders for each repo will be placed
BASEPATH=$HOME
# Set UpdateHD=0 to prevent smlinux updating addons when rebuilding
UpdateHD=1
# set DEBUG=1 if you want to make a debug build for some odd reason
DEBUG=0
# [ These settings are ignored if PRESET is known ]
GIT=sm64pc/sm64ex
BRANCH=nightly
TARGET_WEB=0
TARGET_RPI=0
# [ Linux must be set to command appropriate to your distribution. See FAQ. ]
Linux="sudo apt install -y build-essential bsdmainutils wget git python3 libaudiofile-dev libglew-dev libsdl2-dev binutils libusb-1.0-0-dev libzstd-dev python3-pip p7zip-full mplayer"
# Set AutoUpdate=0 to prevent smlinux updating itself
AutoUpdate=1' > "$SMLINUX"/smlinuxcfg.txt
}

loadconfig(){
TARGET_RPI=0
TEXTSAVES=0
TOUCH_CONTROLS=1
LEGACY_RES=1
BASEPATH=$HOME
ARMONLY=1
DEBUG=0
IMMEDIATELOAD=1
DOS_GL=osmesa
ENABLE_OPENGL_LEGACY=1
SGI=0
ANDROID=0
source "$SMLINUX"/smlinuxcfg.txt
if [ -z $PRESET ] && [ ! -z $REPO ]; then
	PRESET="$REPO"
elif [ -z $PRESET ]; then
	PRESET=sm64-"$BRANCH"
fi
if [ "$PRESET" = "sm64pc" ]; then
	GIT=sm64ex/sm64pc
	BRANCH=master
	elif [ "$PRESET" = "sm64-port" ]; then
	GIT=sm64-port/sm64-port
	BRANCH=master
	EXTERNAL_DATA=0
	elif [ "$PRESET" = "sm64ex" ]; then
	GIT=sm64pc/sm64ex
	BRANCH=nightly
	elif [ "$PRESET" = "sm64exweb" ]; then
	GIT=sm64pc/sm64ex
	BRANCH=nightly
	TARGET_WEB=1
	TARGET_RPI=0
	EXTERNAL_DATA=0
	DISCORDRPC=0
elif [ "$PRESET" = "sm64-portweb" ]; then
	GIT=sm64-port/sm64-port
	BRANCH=master
	TARGET_WEB=1
	TARGET_RPI=0
	EXTERNAL_DATA=0
	DISCORDRPC=0
elif [ "$PRESET" = "sm64nx" ]; then
	GIT=teamsalta/sm64nx
	BRANCH=master
	EXTERNAL_DATA=0
elif [ "$PRESET" = "render96ex" ] || [ "$PRESET" = "Render96ex" ] || [ "$PRESET" = "render96" ] || [ "$PRESET" = "Render96" ]; then
	PRESET=render96ex
	GIT=render96/render96ex
	BRANCH=master
	EXTERNAL_DATA=1
	TEXTSAVES=1
	SGI=1
elif [ "$PRESET" = "cheaterex" ] || [ "$PRESET" = "CHEATERex" ] || [ "$PRESET" = "CHEATEREX" ]; then
	PRESET=cheaterex
	GIT=s4Ys369/cheaterex
	BRANCH=nightly
elif  [ "$PRESET" = "sm64ex-coop" ] || [ "$PRESET" = "coop" ]; then
	PRESET=sm64ex-coop
	GIT=djoslin0/sm64ex-coop
	BRANCH=coop
	NODRAWINGDISTANCE=1
elif [ "$PRESET" = "androidex" ] ; then
	ANDROID="$PRESET"
	PRESET="androidex/app/jni/src"
	GIT=vdavid003/sm64-port-android-base
	BRANCH=sm64ex_nightly
	TARGET_WEB=0
	TARGET_RPI=0
elif  [ "$PRESET" = "sm64-port-android-base" ]; then
	ANDROID="$PRESET"
	PRESET="sm64-port-android-base/app/jni/src"
	GIT=vdavid003/sm64-port-android-base
	BRANCH=master
	EXTERNAL_DATA=0
	TARGET_WEB=0
	TARGET_RPI=0	
elif  [ "$PRESET" = "mkstdos" ]; then
	GIT=mkst/sm64-port
	BRANCH=dos
	EXTERNAL_DATA=0
	TARGET_WEB=0
	TARGET_RPI=0
	TARGET=dos		
	InstallHD=0
elif  [ "$PRESET" = "sm64dos" ]; then
	GIT=fgsfdsfgs/sm64-port
	BRANCH=dos
	EXTERNAL_DATA=0
	TARGET_WEB=0
	TARGET_RPI=0
	TARGET=dos		
fi
if [ ! `uname -m` = "x86_64" ] || [ ! "$VERSION" = "us" ]; then
	DISCORDRPC=0
fi
if [ "$TARGET_WEB" = 1 ]; then 
	TARGET=web
elif [ ! "$TARGET" = "dos" ]; then
	TARGET=pc
fi
if [ -z "$MAXJOBS" ]; then
	if [ "$PRESET" = "sm64nx" ]; then 
		MAXJOBS=$((`nproc` - 1))		
	else 
		MAXJOBS=`nproc`
	fi
fi
	if [ "$2" = "--updatehd" ] || [ "$3" = "--updatehd" ] ||[ "$4" = "--updatehd" ] ||[ "$5" = "--updatehd" ]; then
	UpdateHD=1
	InstallHD=1
elif [ "$2" = "--hd" ] || [ "$3" = "--hd" ] ||[ "$4" = "--hd" ] ||[ "$5" = "--hd" ]; then
	UpdateHD=1
	InstallHD=1
fi
if [ "$2" = "--sgi" ] || [ "$3" = "--sgi" ] ||[ "$4" = "--sgi" ] ||[ "$5" = "--sgi" ]; then
	SGI=1
	EXTERNAL_DATA=1
elif [ "$2" = "--SGI" ] || [ "$3" = "--SGI" ] ||[ "$4" = "--SGI" ] ||[ "$5" = "--SGI" ]; then
	SGI=1
	EXTERNAL_DATA=1
fi
if [ "$2" = "--config" ] || [ "$3" = "--config" ] ||[ "$4" = "--config" ] ||[ "$5" = "--config" ]; then
	CONFIG=1
elif [ "$2" = "config" ] || [ "$3" = "config" ] ||[ "$4" = "config" ] ||[ "$5" = "config" ]; then
	CONFIG=1
fi
if [ "$2" = "--depends" ] || [ "$3" = "--depends" ] ||[ "$4" = "--depends" ] ||[ "$5" = "--depends" ]; then
	DEPENDS=1
fi
}

doconfig(){
if(whiptail --title "Build Options" --yesno "$(cat "$SMLINUX"/smlinuxcfg.txt)" 28 77 --yes-button "Edit Options" --no-button "Proceed" --defaultno); then
	whiptail --title "smlinux paused until you exit editor" --msgbox "Your configuration file will open in a text editor.\n\nWhen you exit your editor, smlinux will continue.\n\nFor first build, default options which include community enhancements are reccommended.\n\nIf you mess up your settings,\nrun smlinux reset to restore to latest defaults." 16 60
editconfig	
fi
}

editconfig(){
echo Looking for a text editor...
EDITORS=kate:epad:gedit:notepadqq:bluefish:geany:lime:medit:leafpad:nano:pico:micro:jed:emacs:vim:vi
IFS=":"
for editor in $EDITORS; do
	$editor "$SMLINUX"/smlinuxcfg.txt
	if [ $? -eq 0 ]; then
		echo "${MAPFILE[0]}"/smlinux: line $(($LINENO - 2)): "$editor": wow! command found!
		echo
		return
	fi
done
}

loademsdk(){
if [ ! -d "$BASEPATH"/emsdk ]; then
	cd "$BASEPATH"
	git clone https://github.com/emscripten-core/emsdk
	cd emsdk
	./emsdk install latest
	./emsdk activate latest
fi
source "$BASEPATH"/emsdk/emsdk_env.sh
}


dodos(){
cd "$BASEPATH"
if [ ! -d "$BASEPATH"/djgpp/bin ]; then
	wget https://github.com/andrewwutw/build-djgpp/releases/download/v3.0/djgpp-linux64-gcc930.tar.bz2
	tar xjf djgpp-linux64-gcc930.tar.bz2
	rm djgpp-linux64-gcc930.tar.bz2
fi
if [ ! -d "$BASEPATH"/djgpp/csdpmi ]; then
	mkdir djgpp/csdpmi
	wget https://sandmann.dotster.com/cwsdpmi/csdpmi7b.zip
	unzip -j -d djgpp/csdpmi csdpmi7b.zip bin/CWSDPMI.EXE
	rm csdpmi7b.zip
fi
export PATH="$BASEPATH"/djgpp/bin:$PATH
}

prepnx(){
mkdir "$BASEPATH"/"$PRESET"/build
mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs
ln -s "$SHARE"/"$PRESET"/sm64.sav "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.sav 
ln -s "$SHARE"/"$PRESET"/sm64.log "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.log 
ln -s "$SHARE"/"$PRESET"/conf.bin "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/conf.bin
ln -s "$SHARE"/"$PRESET"/gamepad1.bindings.json "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/gamepad1.bindings.json
ln -s "$SHARE"/"$PRESET"/keyboard1.bindings.json "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/keyboard1.bindings.json
ln -s "$SMLINUX"/baserom."$VERSION".z64 "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/baserom."$VERSION".z64
cd "$BASEPATH"/"$PRESET"/tools
make -j"$MAXJOBS"
cd "$BASEPATH"/"$PRESET"/import
python3 extract_assets.py
python3 ../scripts/pak.py --source . --output "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/'!!base.pak'
if [ ! -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/'!!base.pak' ]; then
	echo 
	echo Unable to extract and pak ROM.
	echo "smlinux exiting incomplete.  Contact #help-desk for support."
	echo
	xdg-open https://discord.gg/Ub6YHRm &disown
	exit
fi
}

dohd(){ 
if [ "$PRESET" = "sm64nx" ]; then 
	echo Getting Add-on Paks
	if [ ! -d "$BASEPATH"/"$PRESET"/build ] ; then mkdir "$BASEPATH"/"$PRESET"/build
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" ] ; then mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs ] ; then mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"Cleaner Aesthetics" ]; then
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"Cleaner Aesthetics"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"Cleaner Aesthetics"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730430152957362191/cleaner.pak
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"HD Mario . Bowser" ]; then
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"HD Mario . Bowser"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"HD Mario . Bowser"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730425308989227158/arredondo.pak
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~SGI Models" ]; then
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~SGI Models"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~SGI Models"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730645970693652591/sgi1.2.pak
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~OWO Mod" ]; then
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~OWO Mod"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~OWO Mod"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730420038024036362/owo.pak
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~HD Luigi" ]; then
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~HD Luigi"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~HD Luigi"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730425786452017222/luigi.pak
	fi
	if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~NES Retro" ]; then
		mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~NES Retro"
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs/"~NES Retro"
		wget -q https://cdn.discordapp.com/attachments/730416836780490752/730431589749620736/nes.pak
	fi
else
	if [ "$EXTERNAL_DATA" = 1 ] ; then
		if [ ! -d "$BASEPATH"/"$PRESET"/build ] ; then 
			mkdir "$BASEPATH"/"$PRESET"/build
		fi
		if [ ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" ] ; then 
			mkdir "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
		fi
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/.git ] ; then
			echo Updating textures from github...
			cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			git pull
		elif [  -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ] ; then
			mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res.old
			echo Downloading Cleaner Aesthetics Textures...
			git clone --single-branch https://github.com/CrashCrod/Cleaner-Aesthetics.git "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			mv -n "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res.old/* "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
		elif [  ! -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res ] ; then
			if [ "$PRESET" = "render96ex" ]; then
				echo Downloading Render96 Textures... 
				git clone --single-branch https://github.com/pokeheadroom/RENDER96-HD-TEXTURE-PACK "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			else
				echo Downloading Cleaner Aesthetics Textures...
				git clone --single-branch https://github.com/CrashCrod/Cleaner-Aesthetics "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
			fi
		fi
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/gfx/textures/skyboxes ]; then
			rm -rf "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/gfx/textures/skyboxes
		fi
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/screenshots ]; then
			rm -rf "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/screenshots
		fi
		if [ ! -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/hq_sounds_v5.1.zip ]; then
			cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res	
			echo Getting High Quality Sounds...
			wget -q https://github.com/MapAnon/sm64-pc-hq-sounds/releases/download/5.1/hq_sounds_v5.1.zip
		fi
	fi
	if  [ "$SGI" = 1 ]; then
		dosgi
	elif  [ ! "$SGI" = 1 ] && [ ! -f "$BASEPATH"/"$PRESET"/enhancements/Old_School_HD_SGI_Base_Models_V1.3_Refresh_11.7z ] && [ ! -f "$BASEPATH"/"$PRESET"/enhancements/RENDER96_V1* ] ; then
		if [ ! -f "$BASEPATH"/"$PRESET"/enhancements/hd_bowser.rar ] && [ ! "$TARGET" = "dos" ]; then
			cd "$BASEPATH"/"$PRESET"/enhancements
			if [ ! "$PRESET" = "sm64ex-coop" ]; then
				wget -q https://cdn.discordapp.com/attachments/716459185230970880/719758031990030427/Old_School_HD_Mario_Model.zip 
			fi
			wget -q https://cdn.discordapp.com/attachments/716459185230970880/718990046442684456/hd_bowser.rar	
			cd "$BASEPATH"/"$PRESET"	
			cp -Rn actors actors.bak
			if [ ! "$PRESET" = "sm64ex-coop" ]; then
				echo Extracting HD Mario...
				unzip -o enhancements/Old_School_HD_Mario_Model 
			fi
			echo Extracing HD Bowser...
			unrar x -o+ enhancements/hd_bowser
		fi
		if [ ! -f "$BASEPATH"/"$PRESET"/enhancements/3d_coin_v2*.patch ] && [ ! "$TARGET" = "dos" ] && [ "$ANDROID" = 0 ] && [ ! "$PRESET" = "sm64ex-coop" ]; then
			cd "$BASEPATH"/"$PRESET"/enhancements
			if [ "$PRESET" = "sm64pc" ]; then
				wget -q https://cdn.discordapp.com/attachments/716459185230970880/718674249631662120/3d_coin_v2.patch
			else
				cd "$BASEPATH"/"$PRESET"/enhancements
				wget -q https://cdn.discordapp.com/attachments/721806706547490868/725041183700680807/3d_coin_v2_nightly.patch
			fi
			if [ -f "$BASEPATH"/"$PRESET"/enhancements/3d_coin_v2*.patch ]; then
				cd "$BASEPATH"/"$PRESET"
				echo Applying 3D Coin Patch...
				git apply enhancements/3d_coin_v2*.patch
			fi
		fi
		if [ `uname -m` = "x86_64" ] && [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps*.patch ] && [ "$TARGET_WEB" = 0 ] && [ ! "$PRESET" = "sm64ex-coop" ]; then
			cd "$BASEPATH"/"$PRESET"
			if [ ! -f "$BASEPATH"/"$PRESET"/enhancements/60fps ]; then
				echo Applying 60fps patch...
				git apply enhancements/60fps*.patch
				touch enhancements/60fps
				if [ -f "$SHARE"/"$PRESET"/sm64config.txt ] && [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps ]; then
					echo Enabling Vsync...
					sed -i 's/vsync false/vsync true/g' "$SHARE"/"$PRESET"/sm64config.txt
				fi
			fi
		fi
	fi
fi
}

dosgi(){
if  [ "$TARGET_WEB" = 1 ] || [ "$EXTERNAL_DATA" = 0 ]; then
	if(whiptail --title "SGI Model Warning" --yesno "SGI Model Pack V1.3 might not work on anything besides PRESET=sm64ex BRANCH=nightly and TARGET_WEB=0.\nExternal Data is also Required." 10 50 --yes-button "Continue Anyway" --no-button "Cancel" --defaultno); then
		echo WARNING: sgi 1.3 might not work on anything besides sm64ex-nightly
		echo Proceeding anyway, but it may not be succesful.
	else
		exit
	fi
fi
if [ -f "$BASEPATH"/"$PRESET"/enhancements/RENDER96_V1* ] || [ -f "$BASEPATH"/"$PRESET"/enhancements/Old_School_HD_SGI_Base_Models_V1.3_Refresh_11.7z ]; then 
	echo Render96 models already installed...
	return
fi
if [ ! -f /usr/bin/7z ]; then 
	if [ ! -f /bin/7z ]; then
		echo "SGI Models comes as a 7z file but you don't have 7z to extract it."
		if [ -f /usr/bin/apt ]; then
			echo Please provide your password to install...
			sudo apt install p7zip-full
		else
			echo This script checks for /usr/bin/7z.  The ubuntu package is called p7zip.
			echo Please install whatever package gets you 7z and run smlinux again.
			echo Also please let author know what package and distro so I can add it
			echo to depdencency list so others avoid this message.  
			exit
		fi
	fi
fi
if [ -f "$BASEPATH"/"$PRESET"/enhancements/3d_coin*.patch ]; then
	echo Removing 3D coins...
	cd "$BASEPATH"/"$PRESET"
	git apply -R enhancements/3d_coin*.patch
	rm enhancements/3d_coin*.patch
fi
if [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps ]; then
	cd "$BASEPATH"/"$PRESET"
	git apply -R enhancements/60fps*.patch
	rm enhancements/60fps
	if [ -f "$SHARE"/"$PRESET"/sm64config.txt ]; then
		sed -i 's/vsync true/vsync false/g' "$SHARE"/"$PRESET"/sm64config.txt
	fi
fi
if [ -d "$BASEPATH"/"$PRESET"/actors.bak ]; then
	echo Restoring default actors...
	cd "$BASEPATH"/"$PRESET"/enhancements
	rm -rf "$BASEPATH"/"$PRESET"/actors
	mv "$BASEPATH"/"$PRESET"/actors.bak "$BASEPATH"/"$PRESET"/actors
	rm hd_bowser.rar Old_School_HD_Mario_Model.zip
fi
if [ "$PRESET" = "render96ex" ] ; then
	cd "$BASEPATH"/"$PRESET"/enhancements 
	wget -q https://cdn.discordapp.com/attachments/730551213376143431/745382037560492132/RENDER96_V1.4.2_Luigi_Fixed_Sound.zip
	SGIFILE=RENDER96_V1.4.2_Luigi_Fixed_Sound.zip
else
	cd "$BASEPATH"/"$PRESET"/enhancements
	wget -q https://cdn.discordapp.com/attachments/727722992137666573/745038574918828112/RENDER96_V1.3.7z
	SGIFILE=RENDER96_V1.3.7z
fi
if  [ -f "$BASEPATH"/"$PRESET"/enhancements/CHEATER*.patch ]; then
	echo Removing cheater...
	cd "$BASEPATH"/"$PRESET"
	git apply -R enhancements/CHEATER*.patch
	rm enhancements/CHEATER*
fi
cd "$BASEPATH"/"$PRESET"
echo Applying Render96 SGI Models...
7z x enhancements/"$SGIFILE" -aoa 
}
	
scriptUpdate(){
if [ ! -f ~/.smlinuxUpdate ]; then 
	if [ ! -f "${MAPFILE[0]}"/smlinux ] || [ ! -d "$SMLINUX"/.git ] ; then
		echo Installing Script... 		
		if [ -d "$SMLINUX" ]; then
			if [ -d "$SMLINUX".baq ]; then
				rm -rf "$SMLINUX".baq
			fi
			mv -f "$SMLINUX" "$SMLINUX".baq
		fi
		git clone --single-branch https://github.com/enigma9o7/smlinux.git "$SMLINUX"
		if [ -d "$SMLINUX".baq ]; then
			cp -Rn "$SMLINUX".baq/* "$SMLINUX"/
			rm -rf "$SMLINUX".baq
		fi
		if [ ! -d "$SMLINUX"/.git] ; then
			echo ERROR: Cannot connect to github. Run without AutoUpdate enabled.  
			echo smlinux exiting incomplete.
			exit
		fi
		touch ~/.smlinuxUpdate
		mv "$SMLINUX"/smlinux "${MAPFILE[0]}"/
		if [ ! -f "${MAPFILE[0]}"/smlinux ]; then
			echo WARNING: Could not write to first path directory.  Creating $HOME/bin.
			touch "$HOME"/.smlinuxNopath
			mkdir $HOME/bin
			export PATH=$HOME/bin:$PATH
			mapfile -t -d: <<<"$PATH"
			mv -f "$SMLINUX"/smlinux "${MAPFILE[0]}"/
			if [ ! -f "${MAPFILE[0]}"/smlinux ]; then
				echo ERROR - Could not add to path.  Run without AutoUpdate enabled.
				echo smlinux exiting incomplete.
				exit
			fi
		fi
		chmod +x "${MAPFILE[0]}"/smlinux
		cd "$LAUNCH_DIR"
		exec smlinux "$@"
	else
		cd "$SMLINUX"
		git fetch
		if [ "$(git diff HEAD origin/HEAD -- smlinux)" != "" ]; then
			git merge
			if [ ! -f "$SMLINUX"/smlinux ]; then
				echo "ERROR: Script Update Unsuccesful."
				echo "Try #help-desk if script udpates continue to fail"
			else
				echo 'mapfile -t -d: <<<"$PATH"
				mv -f "$SMLINUX"/smlinux "${MAPFILE[0]}"/
				if [ ! -f "${MAPFILE[0]}"/smlinux ]; then
					echo WARNING: Could not write to first path directory.  Creating $HOME/bin.
					touch "$HOME"/.smlinuxNopath
					mkdir $HOME/bin
					export PATH=$HOME/bin:$PATH
					mapfile -t -d: <<<"$PATH"
					mv -f "$SMLINUX"/smlinux "${MAPFILE[0]}"/
					if [ ! -f "${MAPFILE[0]}"/smlinux ]; then
						echo ERROR - Could not add to path.  Run without AutoUpdate enabled.
						exit
					fi
				fi
				chmod +x "${MAPFILE[0]}"/smlinux
				if [ -f "$BASEPATH"/Downloads/smlinux ]; then mv -f "$BASEPATH"/Downloads/smlinux "$BASEPATH"/Downloads/smlinux.old.backup
				fi
				if [ -f "$BASEPATH"/Downloads/smlinux.sh ]; then mv -f "$BASEPATH"/Downloads/smlinux.sh "$BASEPATH"/Downloads/smlinux.old.backup
				fi
				if [ -f "$BASEPATH"/Downloads/smlinux.txt ]; then mv -f "$BASEPATH"/Downloads/smlinux.txt "$BASEPATH"/Downloads/smlinux.old.backup
				fi	
				exec smlinux "$@"' > ~/.smlinuxUpdate
				chmod +x ~/.smlinuxUpdate
				cd "$LAUNCH_DIR"
				exec ~/.smlinuxUpdate "$@"
			fi
		else    
			echo Already up to date.
		fi
	fi
fi
}

makedesktop(){
if [ ! -d "$SHARE"/icons ]; then 
	mkdir "$SHARE"/icons
fi
if [ ! -d "$SHARE"/applications ]; then 
	mkdir "$SHARE"/applications
fi
if [ ! -f "$SHARE"/icons/"$PRESET".* ]; then
	echo Getting Icon...
	if [ "$PRESET" = "sm64ex" ]; then
		wget -q https://cdn.discordapp.com/attachments/711253314855108629/712146686834638890/sm64.png
		mv sm64.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "sm64nx" ]; then 
		wget -q https://cdn.discordapp.com/attachments/711253314855108629/719215654837682226/Super_Mario_64.png
		mv Super_Mario_64.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "render96ex" ]; then 
		mv "$SMLINUX"/r96-icon.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "cheaterex" ]; then 
		wget -q https://cdn.discordapp.com/attachments/710334795674288139/745150550382870548/bowser.png
		mv bowser.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "sm64-port" ]; then 
		wget -q https://cdn.discordapp.com/attachments/710334795674288139/745156574334550096/staricon.png
		mv staricon.png "$SHARE"/icons/"$PRESET".png
	elif [ "$PRESET" = "sm64ex-coop" ]; then 
		wget -q https://cdn.discordapp.com/attachments/710334795674288139/741732375074963556/luigihudicon.png
		mv luigihudicon.png "$SHARE"/icons/"$PRESET".png
	elif [ -f "$BASEPATH"/"$PRESET"/textures/segment2/segment2.05A00.rgba16.png ]; then
		cp "$BASEPATH"/"$PRESET"/textures/segment2/segment2.05A00.rgba16.png "$SHARE"/icons/"$PRESET".png
		echo 16x16 image from ROM used.  Reccommend replacing "$SHARE"/icons/"$PRESET".png
	else 
		echo WARNING: No icon found. 
		echo Reccommend creating "$SHARE"/icons/"$PRESET".png
	fi	
else
	echo Icon already exists...
fi
if [ "$PRESET" = "sm64ex-coop" ] && [ -f "$SHARE"/applications/"$PRESET".desktop ]; then
	rm "$SHARE"/applications/"$PRESET".desktop
	# this is cuz i messed up the old one
fi

if [ ! -f "$SHARE"/applications/"$PRESET".desktop ]; then
	creating Desktop Shorcut and Menu Entry
	echo '[Desktop Entry]
Encoding=UTF-8
Type=Application
StartupNotify=false
Categories=Game;'>"$SHARE"/applications/"$PRESET".desktop
echo Icon="$SHARE"/icons/"$PRESET".png >>"$SHARE"/applications/"$PRESET".desktop
echo Name=Super Mario 64 \("$PRESET"\) >>"$SHARE"/applications/"$PRESET".desktop
	if [ "$PRESET" = "sm64pc" ] || [ "$PRESET" = "sm64ex" ] ; then
		echo Path="$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" >>"$SHARE"/applications/"$PRESET".desktop
		echo Exec=\""$BASEPATH"\"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e --cheats>>"$SHARE"/applications/"$PRESET".desktop
	elif [ "$PRESET" = "sm64ex-coop" ]; then
		echo Path="$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" >>"$SHARE"/applications/"$PRESET".desktop
		echo Exec=\""$BASEPATH"\"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e --cheats --skip-intro >>"$SHARE"/applications/"$PRESET".desktop
	elif [ "$PRESET" = "sm64-port" ]; then
		echo Path="$SHARE"/"$PRESET" >>"$SHARE"/applications/"$PRESET".desktop
		printf "Exec=sh -c \"" >>"$SHARE"/applications/"$PRESET".desktop
		echo \""$BASEPATH"\"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e';echo'\" >>"$SHARE"/applications/"$PRESET".desktop
	elif [ "$PRESET" = "sm64nx" ]; then
		echo Path="$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" >>"$SHARE"/applications/"$PRESET".desktop
		echo Exec=\""$BASEPATH"\"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e>>"$SHARE"/applications/"$PRESET".desktop
	else
		echo Path="$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" >>"$SHARE"/applications/"$PRESET".desktop
		echo Exec=\""$BASEPATH"\"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e --cheats --savepath "$SHARE"/"$PRESET" >>"$SHARE"/applications/"$PRESET".desktop
	fi
	if [ -d ${XDG_DESKTOP_DIR:-$HOME/Desktop} ]; then
		cp "$SHARE"/applications/"$PRESET".desktop ${XDG_DESKTOP_DIR:-$HOME/Desktop}
	fi
else
	echo Menu entry desktop file already exists...
fi
}
rungame(){
if [ "$TARGET_WEB"  = 1 ]; then 
	cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
	ln -s sm64.us.f3dex2e.html index.html
	python3 -m http.server 8100 &
	if [ -f /usr/bin/firefox ]; then
		firefox --new-window http://localhost:8100&disown
	else
		xdg-open http://localhost:8100&disown
	fi
elif [ ! "$ANDROID" = 0 ] ; then
	if [ "$GOTPHONE" = 1 ]; then
		adb shell am start -n com.vdavid003.sm64port/.sm64portActivity
		if [ "$EXTERNAL_DATA" = 1 ]; then
			echo 
			echo When SM64 is launched screen will appear blank while external assets are loaded.
			echo Just wait...
		fi
	elif [ "$EXTERNAL_DATA" = 1 ]; then
		zenity --info --text="Your Android device was not detected so app could not be installed.\nYou must put base assets (base.zip or hdbase.zip) into\nInternal Storage/Android/data/com.vdavid003.sm64port/files\nThis folder will be created when you launch the apk." --title="Transfer External Resources!" --width=470
		echo
		echo "Your Android device was not detected so app could not be installed."
		echo "You must put base assets (base.zip or hdbase.zip) into"
		echo "Internal Storage/Android/data/com.vdavid003.sm64port/files"
		echo 
	fi
	xdg-open "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug &disown
elif [ "$PRESET"  = "sm64ex-coop" ] ; then
	cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
	./sm64.us.f3dex2e --server 27015 --cheats --savepath "$SHARE"/sm64ex-coop --skip-intro --configfile sm64config.server-local.txt &disown
	./sm64.us.f3dex2e --client 127.0.0.1 27015 --cheats --savepath "$SHARE"/sm64ex-coop --skip-intro &disown
elif [ "$TARGET" = "dos" ] && [ -f /usr/bin/dosbox ]; then
	dosbox "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.exe &disown
elif [ "$TARGET" = "dos" ]; then
	echo Cannot testDOS Version from Linux!  I reccomend FreeDOS in VirtualBox.
	xdg-open "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
else 
	gtk-launch "$PRESET"&disown
fi
}

####################################### The Beginning ########################################

SHARE=${XDG_DATA_HOME:-$HOME/.local/share}
SMLINUX="$SHARE"/sm64pc
LAUNCH_DIR=$(pwd)
mapfile -t -d: <<<"$PATH"

# Make sure folders and installer config file exist, if not create them.
if [ ! -d $HOME/.local ]; then 
	mkdir $HOME/.local
fi
if [ ! -d "$SHARE" ]; then 
	mkdir "$SHARE"
fi
if [ ! -d "$SHARE"/"$PRESET" ]; then
	mkdir "$SHARE"/"$PRESET"
fi
if [ ! -f ~/.smlinuxUpdate ]; then
	if [ "$1" = "config" ]; then
		editconfig
		echo "Thank you for editing your smlinux config file." 
		echo "Do you know how to write a GUI to edit it?"
		echo "If so I would love to use it as a front end."
		echo
		exit
	elif [ "$1" = "reset" ]; then
		rm "$SMLINUX"/smlinuxcfg.txt
		makeconfig
		echo
		echo smlinux configuration file has been reset to default.
		echo
		exit
	elif [ ! -f "$SMLINUX"/smlinuxcfg.txt ]; then
		echo smlinux configuration file not found, so making a new one...
		makeconfig
		doconfig
	else
		loadconfig "$@"
		if [ "$CONFIG" = 1 ] && (!( [ "$1" = "--help" ] || [ "$1" = "-help" ] || [ "$1" = "help" ] )); then
			doconfig
		fi
	fi
	echo Loading "$SMLINUX"/smlinuxcfg.txt...
	loadconfig "$@"
	#Play a sound clip for no reason - thank you for playing my game.
	if [ -f /usr/bin/mplayer ] || [ -f /bin/mplayer ]; then
		if [ -f "$BASEPATH"/sm64pc/sound/samples/sfx_mario_peach/0D.aiff ]; then
			sh -c 'mplayer -nolirc -really-quiet "$BASEPATH"/sm64pc/sound/samples/sfx_mario_peach/0D.aiff&'
		elif [ -f "$BASEPATH"/sm64ex/sound/samples/sfx_mario_peach/0D.aiff ]; then
			sh -c 'mplayer -nolirc -really-quiet "$BASEPATH"/sm64ex/sound/samples/sfx_mario_peach/0D.aiff&'
		elif [ -f "$BASEPATH"/render96ex/sound/samples/sfx_mario_peach/0D.aiff ]; then
			sh -c 'mplayer -nolirc -really-quiet "$BASEPATH"/render96ex/sound/samples/sfx_mario_peach/0D.aiff&'
		elif [ -f "$BASEPATH"/sm64-port/sound/samples/sfx_mario_peach/0D.aiff ]; then
			sh -c 'mplayer -nolirc -really-quiet "$BASEPATH"/sm64-port/sound/samples/sfx_mario_peach/0D.aiff&'
		fi
	fi
	if [ ! -d "$SHARE"/"$PRESET" ] && [ "$ANDROID" = 0 ] && [ "$WEB_TARGET" = 0 ]; then
		echo Creating "$SHARE"/"$PRESET" folder for game save and configuration.
		mkdir "$SHARE"/"$PRESET"
	fi
	if [ -f "$SHARE"/"$PRESET"/sm64config.txt ] || [ -f "$SHARE"/"$PRESET"/CHEATERex_config.txt ]; then
		echo SM64 configuration file already exists from previous build.
	elif [ "$PRESET" = "sm64-port" ] || [ "$PRESET" = "sm64nx" ]; then
		echo No compatible sm64 configuration files for this version, game will create one.
	elif [ "$TARGET_WEB" = 0 ] && [ "$ANDROID" = 0 ]; then
		if [ -f "$SHARE"/sm64ex/sm64config.txt ]; then
			cp "$SHARE"/sm64ex/sm64config.txt "$SHARE"/"$PRESET"
			echo Copied configuration from sm64ex.
		elif [ -f "$SMLINUX"/sm64config.txt ]; then
			cp "$SMLINUX"/sm64config.txt "$SHARE"/"$PRESET"
			echo Copied configuration from sm64pc.
		elif [ -f "$SHARE"/render96ex/sm64config.txt ]; then
			cp "$SHARE"/render96ex/sm64config.txt "$SHARE"/"$PRESET"
			echo Copied configuration from render96ex
		elif [ -f "$SHARE"/sm64ex-coop/sm64config.txt ]; then
			cp "$SHARE"/sm64ex-coop/sm64config.txt "$SHARE"/"$PRESET"
			echo Copied configuration from sm64ex-coop
		elif [ -f "$SHARE"/cheaterex/CHEATERex_config.txt ]; then
			cp "$SHARE"/cheaterex/CHEATERex_config.txt "$SHARE"/"$PRESET"/sm64config.txt
			echo Copied configuration from CHEATERex
		else 
			echo No compatible sm64configuration file found, game will create one.
		fi
		if [ "$PRESET" = "cheaterex" ] && [ -f "$SHARE"/"$PRESET"/sm64config.txt ]; then
			mv "$SHARE"/"$PRESET"/sm64config.txt "$SHARE"/"$PRESET"/CHEATERex_config.txt
		fi
	fi
	if [ -f "$SHARE"/"$PRESET"/sm64_save_file.bin ] || [ -f "$SHARE"/"$PRESET"/CHEATERex_save_file.bin ] || [ -f "$SHARE"/"$PRESET"/sm64.sav ]; then
		echo Save file already exists from previous build.
	elif [ "TEXTSAVES" = 1 ]; then
		echo No compatible save files for this version.
	elif [ "$ANDROID" = 0 ] && [ "$TARGET_WEB" = 0 ]; then
		if [ "$PRESET" = "sm64-port" ] && [ -f "$SHARE"/sm64nx/sm64.sav ]; then
			cp "$SHARE"/sm64nx/sm64.sav "$SHARE"/"$PRESET"/sm64_save_file.bin
			echo Copied save file from sm64nx.
		elif [ "$PRESET" = "sm64nx" ] && [ -f "$SHARE"/sm64-port/sm64_save_file.bin ]; then
			cp "$SHARE"/sm64-port/sm64_save_file.bin "$SHARE"/"$PRESET"/sm64.sav
			echo Copied save file from sm64-port.
		elif [ -f "$SHARE"/sm64ex/sm64_save_file.bin ]; then
			cp "$SHARE"/sm64ex/sm64_save_file.bin "$SHARE"/"$PRESET"
			echo Copied save file from sm64ex.
		elif [ -f "$SHARE"/sm64-port/sm64_save_file.bin ]; then
			cp "$SHARE"/sm64-port/sm64_save_file.bin "$SHARE"/"$PRESET"
			echo Copied save file from sm64-port.
		elif [ -f "$SMLINUX"/sm64_save_file.bin ]; then
			cp "$SMLINUX"/sm64_save_file.bin "$SHARE"/"$PRESET"
			echo Copied save file from sm64pc.
		elif [ -f "$SHARE"/cheaterex/CHEATERex_save_file.bin ]; then
			cp "$SHARE"/cheaterex/CHEATERex_save_file.bin "$SHARE"/"$PRESET"/sm64_save_file.bin
			echo Copied save file from cheaterex
		elif [ -f "$SHARE"/sm64nx/sm64.sav ]; then
			cp "$SHARE"/sm64nx/sm64.sav "$SHARE"/"$PRESET"/sm64_save_file.bin
			echo Copied save file from sm64nx.
		else 
			No compatible save file found.
		fi
		if [ "$PRESET" = "cheaterex" ] && [ -f "$SHARE"/"$PRESET"/sm64_save_file.bin ]; then
			mv "$SHARE"/"$PRESET"/sm64_save_file.bin "$SHARE"/"$PRESET"/CHEATERex_save_file.bin
		fi
	fi
else
	loadconfig "$@"
fi

if [ "$1" = "--purge" ] || [ "$1" = "purge" ]; then
	
	echo Wiping...
	rm -rf "$BASEPATH"/sm64pc
	rm -rf "$BASEPATH"/sm64ex
	rm -rf "$BASEPATH"/sm64-port
	rm -rf "$BASEPATH"/sm64nx
	rm -rf "$BASEPATH"/render96ex
	rm -rf "$BASEPATH"/cheaterex
	rm -rf "$BASEPATH"/sm64ex-coop
	rm -rf "$BASEPATH"/sm64-port-android.base
	rm -rf "$BASEPATH"/sm64pc.old
	rm -rf "$BASEPATH"/sm64ex.old
	rm -rf "$BASEPATH"/sm64-port.old
	rm -rf "$BASEPATH"/sm64nx.old
	rm -rf "$BASEPATH"/render96ex.old
	rm -rf "$BASEPATH"/cheaterex.old
	rm -rf "$BASEPATH"/sm64ex-coop.old
	rm -rf "$BASEPATH"/sm64-port-android.base.old
	rm -rf "$SMLINUX"
	rm -rf "$SHARE"/sm64ex	
	rm -rf "$SHARE"/sm64-port
	rm -rf "$SHARE"/sm64nx
	rm -rf "$SHARE"/render96ex
	rm -rf "$SHARE"/cheaterex
	rm -rf "$SHARE"/sm64ex-coop
	rm "$SHARE"/icons/sm64*
	rm "$SHARE"/icons/render96ex*
	rm "$SHARE"/icons/cheaterex*
	rm "$SHARE"/applications/sm64*
	rm "$SHARE"/applications/render96ex*
	rm "$SHARE"/applications/cheaterex*
	rm ${XDG_DESKTOP_DIR:-$HOME/Desktop}/sm64*.desktop
	rm ${XDG_DESKTOP_DIR:-$HOME/Desktop}/render96ex*.desktop
	rm ${XDG_DESKTOP_DIR:-$HOME/Desktop}/cheaterex*.desktop
	rm $HOME/Downloads/smlinux.*
	echo Note this did not remove any packages installed as build tools or dependencies.
	echo Remove those with your package manager.  Devel libraries can always safely be removed.
	echo And of course you must delete smlinux itself from "${MAPFILE[0]}"
        exit
fi

if [ -f "$1" ] || [ -f "$LAUNCH_DIR"/"$1" ] || ( [ -f "$SMLINUX"/baserom."$VERSION".z64 ] && ( [ "$1" = "build" ] || [ "$1" = "update" ]  )); then
	if [ -f ~/.smlinuxUpdate ]; then 
		rm ~/.smlinuxUpdate
		echo Script Update Complete.
	else	# The real start, the rest was preperation and setup. 
		echo 
		if [ ! -d "$SMLINUX"/.git ] || [ "$DEPENDS" = 1 ]; then
			echo "[1] Installing dependancies..."
			if [ -f /usr/bin/apt ]; then
				sudo apt update
			fi
			$Linux
			if [ "$PRESET" = "sm64nx" ] ; then
				pip3 install pillow zstandard tqdm xxhash
				gcccheck
			elif [ ! "$ANDROID" = 0 ]; then
				androidsdk
			elif [ "$TARGET_WEB" = 1 ]; then
				loademsdk
			elif [ "$TARGET" = "dos" ]; then
				dodos
			fi
		elif [ "$PRESET" = "sm64nx" ] && [ ! -d "$BASEPATH"/"$PRESET/build" ]; then
			echo "[1] Installing required build tools for nx..."
			pip3 install pillow zstandard tqdm xxhash
			gcccheck
		elif [ ! "$ANDROID" = 0 ]; then
			echo "[1] Loading Android SDK Environment..."
			androidsdk
		elif [ "$TARGET_WEB" = 1 ]; then
			echo "[1] Loading Enscriptem for Web Target..."
			loademsdk
		elif [ "$TARGET" = "dos" ]; then
			echo "[1] Loading djgpp for DOS Target..."
			dodos
		else
			echo "[1] This is not first build, skipping dependencies and romcheck..."
		fi
		if [ -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
			if [ ! -f "$BASEPATH"/"$PRESET"/baserom."$VERSION".z64 ]  && [ -d "$BASEPATH"/"$PRESET" ]; then
				ln -s "$SMLINUX"/baserom."$VERSION".z64 "$BASEPATH"/"$PRESET"/baserom."$VERSION".z64
			fi
		else
			echo "Verifying ROM..."
			cd "$LAUNCH_DIR"
			if [ -f "$1" ]; then 
				cp "$1" "$SMLINUX"/baserom."$VERSION".z64
				vettrom
			fi
			if [ ! -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
				if [ -f "$BASEPATH"/sm64pc/baserom."$VERSION".z64 ]; then
					cp "$BASEPATH"/sm64pc/baserom."$VERSION".z64 "$SMLINUX"
					vettrom
				fi
				if [ -f "$BASEPATH"/sm64ex/baserom."$VERSION".z64 ] && [ ! -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
					cp "$BASEPATH"/sm64ex/baserom."$VERSION".z64 "$SMLINUX"
					vettrom
				fi
				if [ -f "$BASEPATH"/sm64-port/baserom."$VERSION".z64 ] && [ ! -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
					cp "$BASEPATH"/sm64-port/baserom."$VERSION".z64 "$SMLINUX"
				vettrom
				fi
			fi
			echo
			if [ -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
				echo Located and Verified.
			elif [ -f "$1" ]; then
				exec 2> >(grep -v GtkDialog >&2) # Supress GTK Dialog Warnings
				zenity --error --text="ERROR: Specified file is not original Super Mario 64 ROM image\nMake sure VERSION= is set to the correct region if not US romfile\n" --title="Your installation is incomplete." --width=640 &disown	
				sleep 1			
				echo "ERROR: Specified file is not original Super Mario 64 ROM image or VERSION= set wrong."
				echo
				exit
			elif [ "$1" = "update" ] || [ "$1" = "build" ]; then
				echo "ERROR: Must provide valid path/filename to Super Mario 64 romfile."	
				echo
				echo smlinux exiting incomplete.  Please specify romfile.
				echo
				exit
			else	
				echo WARNING: No ROM file found.  Please specify a romfile when you are ready to build.
			fi
		fi
		echo
		echo [2] Checking Github for smlinux updates....
		if [ "$AutoUpdate" = 1 ]; then
			scriptUpdate "$@"
		else
			echo "WARNING: AutoUpdate Disabled. You might be using an old version of smlinux!"
			echo "For the latest fixes and features, please set AutoUpdate=1 in configuration."
		fi
	fi
else
	echo "/-----------------------------------------------------------------------------\\"
	echo "|                                                                             |"
	echo "|      Super Mario 64 Install * Build * Update Script for Linux               |"
	echo "|                                                                             |"
	echo "| Installation & First Build: ./smlinux <romfile>                             |"
	echo "|  for example:                                                               |"
	echo "|   ./smlinux ~/roms/n64/sm64.n64  or  ./smlinux \"Super Mario 64 (U) [!].z64\" |"
	echo "|                                                                             |"
	echo "| Normal Usage: smlinux <command> <options>                                   |"
	echo "|                                                                             |"
	echo "| Commands:                                                                   |"
	echo "|  update: Updates source & rebuilds, preserving mods and external resources  |"
	echo "|  build:  Gets new source from github and builds. (Renames existing folder)  |"
	echo "|  config: Opens smlinuxcfg.txt in text editor without building               |"
	echo "|  reset:  Resets smlinux configuration file to default settings              |"
	echo "|  purge:  Removes all files created by this script, including sm64           |"
	echo "|                                                                             |"
	echo "| Options: --depends  reinstall dependencies                                  |"
	echo "|          --config   prompt to edit configuration file before build          |"
	echo "|          --hd       aquire & apply upscale enhancements (see FAQ)           |"
	echo "|          --sgi      aquire and apply Render96 SGI model pack v1.3           |"
	echo "|                                                                             |"
	echo "-------------------------------------------------------------------------------"
	if [ "$1" = "--help" ] || [ "$1" = "-help" ] || [ "$1" = "help" ] || [ "$1" = "-h" ]; then
		exit
	elif [ -f "$SMLINUX"/baserom."$VERSION".z64 ]; then
		echo "ERROR: You must specify update, build, config, reset or purge."
	else 
		echo "ERROR: Must provide valid path/filename to Super Mario 64 romfile."	
	fi
	exit
fi
if [ "$1" = "-u" ] || [ "$1" = "--update" ] || [ "$1" = "update" ] || [ "$1" = "up" ]; then
	if [ ! -d "$BASEPATH"/"$PRESET" ]; then
		echo
		echo ERROR: No "$BASEPATH"/"$PRESET" folder to update!
		echo Specify smlinux build for a fresh build.
		exit
	fi
	echo
	echo [3] Checking "$PRESET" github repository for updates...
	if [ ! "$ANDROID" = 0 ]; then
		cd "$BASEPATH"/"$ANDROID"
	else
		cd "$BASEPATH"/"$PRESET"
	fi
	git fetch
	git checkout "$BRANCH"
	if [ "$(git diff HEAD origin/HEAD)" != "" ]; then
		 git merge
	fi
	if [ "$?" = "1" ]; then
		cd "$BASEPATH"/"$PRESET"
		echo Source update attempt failed, removing patches...
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/3d_coin*.patch ]; then
			git apply -R enhancements/3d_coin*.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps ]; then
			git apply -R enhancements/60fps*.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/CHEATER*.patch ]; then
			git apply -R enhancements/CHEATER*.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/menu-arrows.patch ]; then
			git apply -R enhancements/menu-arrows.patch
		fi
		git merge
		if [ "$?" = "1" ]; then
			echo ERROR: Unable to merge source updates from github.
			echo Rebuild will continue with existing source.
		else
			echo Update Succesful.
		fi
		echo Reapplying previously removed patches...
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps ]; then
			echo 60fps...
			git apply enhancements/60fps*.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/3d_coin*.patch ]; then
			echo 3D Coins...
			git apply enhancements/3d_coin*.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/CHEATER*.patch ]; then
			echo Cheater...
			git apply enhancements/CHEATER*.patch
		fi
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/menu-arrows.patch ]; then
			echo Menu Arrows....
			git apply enhancements/menu-arrows.patch
		fi
	fi
	if [ ! "$ANDROID" = 0 ]; then
		git submodule init
		git submodule update	
		if [ -d "$BASEPATH"/"$ANDROID"/app/build ]; then
			echo Wiping old Android Build...
			rm -rf "$BASEPATH"/"$ANDROID"/app/build
			rm -rf "$BASEPATH"/"$ANDROID"/app/.externalNativeBuild
		fi
	fi
	echo
	echo [4] Applying pre-build modifications...
	if [ "$UpdateHD" = 1 ] && [ "$InstallHD" = 1 ]; then
		dohd
	elif [ "$SGI" = 1 ]; then
		printf "\nSGI Selected, Processing...\n\n"
		dosgi
	fi
	if ([ "$PRESET" = "sm64ex" ] || [ "$PRESET" = "androidex" ] || [ "$PRESET" = "render96ex" ]) && [ ! -f "$BASEPATH"/"$PRESET"/enhancements/CHEATER7*.zip ]; then
		echo Updating cheats...
		cd "$BASEPATH"/"$PRESET"/enhancements
		if [ -f "$BASEPATH"/"$PRESET"/enhancements/CHEATER*.zip ]; then
			rm "$BASEPATH"/"$PRESET"/enhancements/CHEATER*.zip
		fi
		if  [ "$PRESET" = "render96ex" ]; then
			wget -q https://cdn.discordapp.com/attachments/716459185230970880/755831396991500438/CHEATERv7Render96ex.zip
		else
			wget -q https://cdn.discordapp.com/attachments/716459185230970880/755132231244054618/CHEATERv7.zip
		fi
		if [ -f CHEATER*.zip ] && [ -f CHEATER*.patch ]; then
			cd "$BASEPATH"/"$PRESET"
			git apply -R enhancements/CHEATER*.patch
			cd enhancements
			rm CHEATER*.patch
			unzip -q CHEATER*
			cd ..
			git apply enhancements/CHEATER.patch
		elif [ -f CHEATER*.zip ]; then
			unzip -q CHEATER*
			cd ..
			git apply enhancements/CHEATER.patch
		fi
		if [ ! -f "$BASEPATH"/"$PRESET"/enhancements/menu-arrows.patch ]; then
			echo Applying Menu Arrows...
			cp "$SMLINUX"/menu-arrows.patch "$BASEPATH"/"$PRESET"/enhancements
			cd "$BASEPATH"/"$PRESET"
			git apply enhancements/menu-arrows.patch
		fi
	elif [ "$PRESET" = "cheaterex" ] && [ ! -f "$BASEPATH"/"$PRESET"smo.cappy_assets.zip ]; then
		echo Getting smo cappy assets as required for cheaterex
		cd "$BASEPATH"/"$PRESET" 
		wget -q https://cdn.discordapp.com/attachments/723992726319792140/754402820588961882/smo.cappy_assets.zip
		unzip -q -o smo.cappy_assets
	fi
	if [ "TARGET_WEB" = 1 ] && [ -f "$BASEPATH"/"$PRESET"/enhancements/60fps ]; then
		echo Removing 60fps for web target...
		git apply -R enhancements/60fps*.patch
		rm enhanements/60fps			
	fi
	echo		
	echo [5] Compiling...
	if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" ]; then
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old ]; then
			rm -rf "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old
		fi
		mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old
	fi
	domake
	echo
	if [ ! -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2* ]; then
		echo "ERROR: Build Failure - output file not found."  
		if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old ]; then
			echo "Restoring previous build..."
			if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" ]; then 
				rm -rf "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" 
			fi
			mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"
		fi
		echo "smlinux exiting incomplete.  Contact #help-desk for support."
		xdg-open https://discord.gg/Ub6YHRm &disown
		exit
	fi
	if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/res ]; then
		echo [6] Restoring External Resources...
		cp -rpn "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/res/. "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
	elif [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/romfs ]; then
		echo "[6] Restoring Savefile, ROM and ROM Filesystem (paks)"
		cp -rpn "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET".old/romfs/. "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/romfs
		ln -s "$SHARE"/"$PRESET"/sm64.sav "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.sav 
		ln -s "$SHARE"/"$PRESET"/sm64.log "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.log 
		ln -s "$SHARE"/"$PRESET"/conf.bin "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/conf.bin
	 	ln -s "$SHARE"/"$PRESET"/gamepad1.bindings.json "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/gamepad1.bindings.json
		ln -s "$SHARE"/"$PRESET"/keyboard1.bindings.json "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/keyboard1.bindings.json
		ln -s "$SMLINUX"/baserom."$VERSION".z64 "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/baserom."$VERSION".z64
	elif [ "$PRESET" = "sm64nx" ]; then
		echo "[6] Preparing Savefile, ROM and ROM Filesystem (paks)"
		prepnx	
	else
		echo [6] No resources found in previous build, skipping restore...
	fi
	if [ ! "$ANDROID" = 0 ] && [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res/gfx ]; then
		cd "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/res
		zip -r -0 -u hdbase gfx
		rm -rf gfx
	fi
	echo
	if [ "$TARGET" = "web" ]; then
		echo [7] Update Complete.  
	elif [ ! "$ANDROID" = 0 ] && [ ! -f "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/app-debug.apk ]; then
		echo
		echo "ERROR: Build Failure.  Android Package Kit (apk) not found."
		echo "smlinux exiting incomplete.  Contact #help-desk for support."
		xdg-open https://discord.gg/Ub6YHRm &disown
		exit
	elif [ "$ANDROID" = 0 ] && [ "$TARGET" = "pc" ] ; then
		echo [7] Verifying Menu Entry....
		makedesktop
		echo
		echo [8] Update Complete.  
	elif [ ! "$ANDROID" = 0 ]; then
		mv "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/app-debug.apk "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/sm64."$VERSION".f3dex2e.apk
		echo [7] Update Complete. 
	elif [ "$TARGET" = "dos" ]; then
		mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e.exe "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.exe
	fi
	rungame
	if [ "$TARGET" = "dos" ] && [ ! -f /usr/bin/dosbox ]; then
		true
	elif [ "$EXTERNAL_DATA" = 0 ]; then
		sleep 5
	elif [ "$PRESET" = "render96ex" ]; then
		sleep 30
	else 
		sleep 10
	fi
	echo
	echo smlinux is complete.  You may exit or close this terminal window.
	if [ "$TARGET_WEB" = 1 ]; then
		echo Python Webserver will remain running until it is closed.
		echo Unless you forward a port you cannot connect from outside your local network.
	fi
	echo
	exit
fi
if [ -d "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET" ]; then
	if [ ! "$ANDROID" = 0 ]; then
		echo WARNING: "$ANDROID" directory already exists! 
		echo Renaming to "$BASEPATH"/"$ANDROID".old...
		if [ -d "$BASEPATH"/"$ANDROID".old ]; then
			rm -rf "$BASEPATH"/"$ANDROID".old
		fi
		mv "$BASEPATH"/"$ANDROID" "$BASEPATH"/"$ANDROID".old
	else
		echo WARNING: "$PRESET" directory already exists!  Renaming to "$PRESET".old...
		if [ -d "$BASEPATH"/"$PRESET".old ]; then
			rm -rf "$BASEPATH"/"$PRESET".old
		fi
		mv "$BASEPATH"/"$PRESET" "$BASEPATH"/"$PRESET".old
	fi
fi
if [ ! -d "$BASEPATH"/"$PRESET" ]; then
	cd "$BASEPATH"
	if [ ! "$ANDROID" = 0 ]; then
		printf "\n[3] Downloading Android source from github... \n"
		git clone https://github.com/"$GIT" -b "$BRANCH" "$ANDROID"
		cd "$ANDROID"
		git submodule init
		git submodule update
		./getSDL.sh
	else
		printf "\n[3] Downloading source from github... \n"
		git clone https://github.com/"$GIT" -b "$BRANCH" "$PRESET"
	fi
	if [ "$PRESET" = "cheaterex" ]; then
		echo Getting smo cappy assets as required for cheaterex
		cd "$BASEPATH"/"$PRESET" 
		wget -q https://cdn.discordapp.com/attachments/723992726319792140/754402820588961882/smo.cappy_assets.zip
		unzip -q -o smo.cappy_assets
	fi
else
	echo ERROR: Could not rename old folder so cannot clone new one.
	echo Proceeding with existing source.
fi
if [ ! -d "$BASEPATH"/"$PRESET" ]; then
	echo "ERROR: Could not reach github."
	echo "Script Ending Incomplete.  Contact #help-desk for support."
	xdg-open https://discord.gg/Ub6YHRm &disown
	exit
elif [ ! -f "$BASEPATH"/"$PRESET"/baserom."$VERSION".z64 ]; then
	ln -s "$SMLINUX"/baserom."$VERSION".z64 "$BASEPATH"/"$PRESET"/baserom."$VERSION".z64
fi

echo
echo [4] Extracting Assets from ROM...
echo
if [ "$PRESET" = "sm64nx" ]; then
	prepnx
else 	
	cd "$BASEPATH"/"$PRESET"
	./extract_assets.py "$VERSION"
fi

echo
echo [5] Applying Community Enhancements...
echo

if [ "$InstallHD" = 1 ]; then 
	dohd
elif [ "$SGI" = 1 ]; then
	dosgi
elif [ "$TARGET" = "pc" ]; then
	echo "WARNING: InstallHD Disabled in Config File."
fi
if  [ "$PRESET" = "sm64ex" ] || [ "$PRESET" = "render96ex" ] || [ "$PRESET" = "sm64ex-coop" ] || [ "$PRESET" = "androidex" ]; then 
	cd "$BASEPATH"/"$PRESET"/enhancements
	cp "$SMLINUX"/menu-arrows.patch .
	if  [ "$PRESET" = "render96ex" ]; then
		wget -q https://cdn.discordapp.com/attachments/716459185230970880/755831396991500438/CHEATERv7Render96ex.zip
	else
		wget -q https://cdn.discordapp.com/attachments/716459185230970880/755132231244054618/CHEATERv7.zip
	fi
	if [ -f CHEATER*.zip ]; then
		unzip -q CHEATER*
		cd "$BASEPATH"/"$PRESET"
		echo Appling Cheats...
		git apply enhancements/CHEATER*.patch
	fi
	echo Applying Menu Arrows...
	cd "$BASEPATH"/"$PRESET"
	git apply enhancements/menu-arrows.patch
fi
if [ "$BRANCH" = "sm64ex_nightly" ] && [ ! "$TOUCH_CONTROLS" = 1 ]; then
	cd "$BASEPATH"/"$PRESET"
	cp "$SMLINUX"/pro1.patch enhancements
	echo "Applying Pro¹ Configuration File..."
	git apply enhancements/pro1.patch
fi
echo
echo [6] Compiling...
echo
domake
if [ ! -f "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2* ]; then
	echo
	echo ERROR: Build Failure.  Expected binary file not found.
	echo "smlinux exiting incomplete.  Contact #help-desk for support."
	xdg-open https://discord.gg/Ub6YHRm &disown
	exit
elif [ ! "$ANDROID" = 0 ] && [ ! -f "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/app-debug.apk ]; then
	echo
	echo ERROR: Build Failure.  Expected apk file not found.
	echo "smlinux exiting incomplete.  Contact #help-desk for support."
	xdg-open https://discord.gg/Ub6YHRm &disown
	exit
elif [ ! "$ANDROID" = 0 ]; then
	mv "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/app-debug.apk "$BASEPATH"/"$ANDROID"/app/build/outputs/apk/debug/sm64."$VERSION".f3dex2e.apk
elif [ "$TARGET" = "dos" ]; then
	mv "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64."$VERSION".f3dex2e.exe "$BASEPATH"/"$PRESET"/build/"$VERSION"_"$TARGET"/sm64.exe
fi

echo
if [ "$TARGET" = "pc" ] && [ "$ANDROID" = 0 ]; then
	echo [7] Creating Desktop Shortcut and Menu Entry...
	makedesktop
else
	echo [7] Skipping menu entry for non Linux version...
fi
echo
echo [8] Build Succesful!  Testing Application Launch...
echo
rungame
if [ -f "$HOME"/.smlinuxNopath ]; then
	rm "$HOME"/.smlinuxNopath
	exec 2> >(grep -v GtkDialog >&2) # Supress GTK Dialog Warnings
	zenity --info --text='You did not have a home folder in your path so $HOME/bin was created.\n\nReboot or type \n\n    PATH=$HOME/bin:$PATH\n\nbefore running smlinux again.' --title="Your installation is complete." --width=450	
	printf '\nYou did not have a home folder in your path so $HOME/bin was created.\n\nReboot or type \n\n      PATH=$HOME/bin:$PATH\n\nbefore running smlinux again.\n\n'
elif [ "$EXTERNAL_DATA" = 0 ]; then
	sleep 5
elif [ "$PRESET" = "render96ex" ]; then
	sleep 30
else
	sleep 10
fi
if [ "$TARGET" = "web" ]; then
	echo
	echo Python webserver will remain running until you kill python3.
	echo WARNING: emsdk environment is loaded.  Do not try to
	echo use this shell to build.  Exit and open new shell. 
elif [ "$TARGET" = "dos" ]; then
	echo
	echo WARNING: djgpp environment is loaded.  Do not try to 
	echo use this shell to build.  Exit and open new shell. 
fi
echo
echo smlinux is complete.  Please exit or close this terminal window.